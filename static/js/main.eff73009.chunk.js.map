{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","width","window","innerWidth","heightMultiplier","startedSort","isSorted","TIME","this","updateDimensions","setHeightMultiplier","addEventListener","bind","removeEventListener","prevProps","prevState","nav_btn","document","getElementsByClassName","forEach","btn","disabled","setState","setArray","arraySize","Math","floor","containerHeight","clientHeight","round","i","getArraySize","push","getRandomInt","iterations","array_bar","size","setTimeout","style","backgroundColor","elem","arr","j","temp","hMult","swap","height","length","sortCompleteAnimation","minimum","pos","newPos","insertionSortHelper","slice","splice","counter","origPos","arrCopy","end","animations","quickSortRecursive","animateQSort","start","pivotIndex","partition","pivotValue","t","idx1","idx2","pivot","mergeSortRecursive","animateMSort","mid","merge","arr1Index","arr2Index","tempArr","tempArrIndex","comparisonsArr","console","log","arrLength","beadMatrix","numberToBead","k","beadToNumber","animateBeadSort","largest","max","numInBeads","beads","Array","fill","numbers","n","heapify","animateHeapSort","left","right","elem1","elem2","heightMult","className","id","onClick","bubbleSort","selectionSort","insertionSort","quickSort","mergeSort","beadSort","heapSort","radixSort","testAlgorithms","map","value","idx","key","min","random","jsSortedArr","sort","a","b","hSortedArray","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eff73009.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            width: window.innerWidth,\n            heightMultiplier: 4,\n            startedSort: false,\n            isSorted: false,\n            TIME: 500\n        };\n    }   \n\n    /**\n     * Add event listener\n     */\n    componentDidMount(){\n        this.updateDimensions();\n        this.setHeightMultiplier();\n        window.addEventListener('resize', this.updateDimensions.bind(this));    \n    }\n\n    /**\n     * Remove event listener\n     */\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions.bind(this));\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\n    \n        if(this.state.startedSort ){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.isSorted){\n            \n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = false;\n            });\n\n            this.setState({\n                startedSort: false,\n                isSorted: false\n            });\n\n            this.setArray();\n        }\n    }\n\n    //call this function on window resize\n    updateDimensions(){\n        this.setState({\n            width: window.innerWidth,\n            //height: document.getElementsByClassName(\"array-container\")[0].clientHeight\n        });\n\n        this.setArray();\n    }\n\n    getArraySize(){\n        let width = this.state.width;\n\n        //12 = 7px(width) + [2px + 2px](margin) + 1px(border)\n        let arraySize = Math.floor((width - 100)/12);\n\n        if(arraySize>=75){\n            return 75;\n        }\n\n        return arraySize;\n    }\n\n    setHeightMultiplier(){\n        let containerHeight = document.getElementsByClassName(\"array-container\")[0].clientHeight;\n\n        this.setState({\n            heightMultiplier: Math.round((containerHeight-10)/108)\n        });\n    }\n\n    setArray(){\n        const array = [];\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,100))\n        }\n\n        this.setState({array});\n    }\n\n    sortCompleteAnimation(iterations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            size = this.getArraySize(),\n            TIME = this.state.TIME; \n\n        setTimeout(()=>{\n            for(let i=0; i<size; i++){\n                setTimeout(()=>{\n                    array_bar[i].style.backgroundColor = \"green\";\n                }, i*30);\n            }\n        }, (iterations+1)*TIME);\n\n        setTimeout(()=>{\n                [...array_bar].forEach(elem=>{\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 350);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"green\";\n                    }, 700);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 1000);\n                })\n        }, iterations*TIME + size*30 + 200); //200ms for delay\n\n        setTimeout(()=>{\n            this.setState({isSorted: true});\n        }, iterations*TIME + size*30 + 1200 + 500); //1200ms for previous setTimeout to complete + 500ms delay     \n    }\n\n    swap(arr, i, j){\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    /**\n    * START OF SORTING ALGORITHM FUNCTIONS\n    */\n\n\n    //BUBBLE SORT ANIMATION FUNCTION(S)\n    bubbleSort(){\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,    \n            array_bar = document.getElementsByClassName('array-elem'),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n\n        for(let i =0; i<arr.length; i++){\n            setTimeout(()=>{ \n                for(let j=0; j<arr.length-i-1; j++){\n                    setTimeout(()=>{\n                        array_bar[j+1].style.backgroundColor = 'blue';\n                        array_bar[j].style.backgroundColor = 'red';\n                        setTimeout(()=>{\n                            if(arr[j] > arr[j+1]){\n\n                                this.swap(arr, j, j+1);\n\n                                array_bar[j].style.height = `${arr[j]*hMult}px`;\n                                array_bar[j+1].style.height = `${arr[j+1]*hMult}px`;\n\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                            else{\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                        }, TIME/(arr.length-i-1));\n                    }, j*TIME/(arr.length-i-1));\n                }\n            },i*TIME);  \n        }        \n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF BUBBLE SORT ANIMATION FUNCTION(S)    \n\n\n    //SELECTION SORT ANIMATION FUNCTION(S)\n    selectionSort(){\n\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n\n        for(let i=0; i<arr.length-1; i++){\n            setTimeout(()=>{\n                let minimum =i;\n                for(let j = i+1; j<arr.length; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.backgroundColor = 'red';\n                        array_bar[minimum].style.backgroundColor = 'blue';\n                        setTimeout(()=>{\n                            if(arr[j] < arr[minimum]){\n                            array_bar[minimum].style.backgroundColor = 'lightblue';\n                            minimum = j; \n                            }  \n                            else{\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }  \n                        }, 4);\n                    }, j*4);    \n                }\n                setTimeout(()=>{\n\n                    this.swap(arr, i, minimum)\n\n                    array_bar[i].style.height = `${arr[i]*hMult}px`;\n                    array_bar[minimum].style.height = `${arr[minimum]*hMult}px`;\n                    array_bar[minimum].style.backgroundColor = 'lightblue';\n\n                }, TIME);\n\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF SELECTION SORT ANIMATION FUNCTION(S)\n\n\n    //INSERTION SORT ANIMATION FUNCTION(S)\n    insertionSort(){\n\n        //Disable nav buttons [AND TO HANDLE OTHER ACTIONS WHEN NEEDED]\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n        \n        for(let i=0; i<arr.length; i++){\n            setTimeout(()=>{\n                let pos = i;\n\n                /*\n                returns the pos where the last element\n                of the passed array segment needs to be moved to\n                */\n                let newPos = this.insertionSortHelper(arr.slice(0,i+1), pos); \n\n                if(newPos !== pos)\n                {\n                    //This inserts the value of arr[pos] on index newPos, removing 0 elements\n                    arr.splice(newPos,0,arr[pos]);\n\n                    /*\n                    This removes 1 element from the array starting at pos+1 \n                    [+1 because a new element is added in the previous line]\n                    */\n                    arr.splice(pos+1,1);\n                    \n                    /*\n                    Animate swapping of element at index j with j-1\n                    till it reaches the desired position [newPos]\n                    */\n                    for(let j=pos, counter=0; j>newPos; j--, counter++){\n                        /*\n                        The timestamps can be understood as follows:\n                        At t=0: Initialize Colors\n                        At t=t/2: Swap Values\n                        At t=t: Reset colors to original for next Iteration\n                        */\n                        setTimeout(()=>{\n\n                            //Initialize current and preceding elem to BLUE and RED\n                            array_bar[j-1].style.backgroundColor = 'red';\n                            array_bar[j].style.backgroundColor = 'blue';\n\n                            //SWAP Values\n                            setTimeout(()=>{\n                                array_bar[j].style.height = `${arr[j]*hMult}px`;\n                                array_bar[j-1].style.height = `${arr[newPos]*hMult}px`;\n                            }, TIME/(2*(pos-newPos)));\n\n                            /*\n                            SET current last element to lightblue \n                            so it can be reinitialized next iteration\n                            */\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = 'lightblue' ;\n                                \n                                if(j===newPos+1){\n                                    array_bar[newPos].style.backgroundColor = 'lightblue';\n                                }\n                            }, (TIME/(pos-newPos)));\n\n                        \n                        }, counter*(TIME/(pos-newPos)));    \n                    }\n                }\n                /*\n                Simple Blink animation to indicate \n                that the element does not move position\n                */\n                else{\n                    array_bar[i].style.backgroundColor = 'red';\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 150);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'red';\n                    }, 300);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 450);\n                }\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n    }\n\n    //takes in an array and returns the index where the last element should inserted\n    insertionSortHelper(arr, pos){\n        let origPos = pos;\n        while(pos>0 && arr[origPos]<arr[pos-1]){\n            pos--;\n        }\n\n        return pos;\n    }   \n    //END OF INSERTION SORT ANIMATION FUNCTION(S)\n\n\n    // QUICKSORT ANIMATION FUNCTION(S)\n    quickSort(){\n\n        this.setState({startedSort: true});\n\n        const arrCopy = [...this.state.array],  //Create a copy of the original array for manipulations\n            start = 0,\n            end = arrCopy.length - 1,\n            animations = {\n                \"pos\": [],      //store the index of elements that will be swapped\n                \"pivot\": [],    //store the pivots for each run\n                \"counter\": [0]  //count how many swaps take place\n            };\n\n        this.quickSortRecursive(arrCopy, start, end, animations);\n\n        this.animateQSort( animations);\n\n    }\n\n    quickSortRecursive(arr, start, end, animations){\n        if(start >= end){\n            return;\n        }\n\n        let pivotIndex = this.partition(arr, start, end, animations);\n        this.quickSortRecursive(arr, start, pivotIndex-1, animations);\n        this.quickSortRecursive(arr, pivotIndex+1, end, animations);\n    }\n\n    partition(arr, start, end, animations){\n\n        let pivotValue = arr[end],\n            i = start;\n\n        for(let j=start; j<end; j++){\n            if(arr[j] < pivotValue){\n                animations[\"pos\"].push([j,i]);\n                \n                this.swap(arr, j, i);\n                i++\n            }     \n        }\n        \n        animations[\"pos\"].push([i,end]);\n        animations[\"pivot\"].push([i,end]);\n        animations[\"counter\"].push(animations[\"pos\"].length);\n        this.swap(arr, i, end);\n        \n        return i; \n    }\n\n    animateQSort(animations){\n\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n\n        for(let i=0; i <animations[\"counter\"].length - 1; i++){\n            setTimeout(()=>{\n                for(let j=animations[\"counter\"][i], t=0; j<animations[\"counter\"][i+1]; j++, t++){\n                    setTimeout(()=>{\n                        let idx1 = animations[\"pos\"][j][0],\n                            idx2 = animations[\"pos\"][j][1],\n                            pivot = animations[\"pivot\"][i][1];\n                        \n                        array_bar[idx1].style.backgroundColor = \"red\";\n                        array_bar[idx2].style.backgroundColor = \"blue\";\n\n                        array_bar[pivot].style.backgroundColor = \"green\";\n\n                        this.swap(arr, idx1, idx2);\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.height = `${arr[idx1]*hMult}px`;\n                            array_bar[idx2].style.height = `${arr[idx2]*hMult}px`;\n                        }, TIME/(2*(animations[\"counter\"][i+1]-animations[\"counter\"][i])));\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.backgroundColor = `lightblue`;\n                            array_bar[idx2].style.backgroundColor = `lightblue`;\n                        }, TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                        \n                    }, t*TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                }\n            }, i*TIME);\n        }\n\n    this.sortCompleteAnimation(animations[\"counter\"].length - 1);\n\n    }\n    //END OF QUICKSORT ANIMATION FUNCTION(S)\n\n\n    //MERGESORT ANIMATION FUNCTION(S)\n    mergeSort(){\n\n        this.setState({startedSort: true})\n\n        const arr = [...this.state.array],\n            start = 0,\n            end = arr.length-1,\n            animations = {\n                \"startPos\": [],\n                \"values\": [],\n                \"endPos\": [],\n                \"midPos\": [],\n                \"comparisons\": []\n            };\n\n        this.mergeSortRecursive(arr,start, end, animations);\n\n        this.animateMSort(animations);\n    }\n\n    mergeSortRecursive(arr, start, end, animations){\n        if(start>=end){\n            return;\n        }\n\n        let mid = Math.floor((start+end)/2);\n\n        this.mergeSortRecursive(arr, start, mid, animations);\n        this.mergeSortRecursive(arr, mid+1, end, animations);\n        this.merge(arr, start, mid, end, animations);\n    }\n\n    merge(arr, start, mid, end, animations) {\n        let arr1Index = start,\n            arr2Index = mid +1,\n            tempArr = [],\n            tempArrIndex = 0,\n            comparisonsArr = [];\n\n        for(let i = start; i<=end; i++){\n            if(arr1Index > mid){\n                comparisonsArr.push([arr1Index, mid]);\n                tempArr[tempArrIndex] = arr[arr2Index];\n                tempArrIndex++;\n                arr2Index++;\n            }\n            else if(arr2Index > end){\n                comparisonsArr.push([arr2Index, end]);\n                tempArr[tempArrIndex] = arr[arr1Index];\n                tempArrIndex++;\n                arr1Index++;\n            }\n            else if(arr[arr1Index] < arr[arr2Index]){\n                comparisonsArr.push([arr1Index, arr2Index]);\n                tempArr[tempArrIndex] = arr[arr1Index];\n                tempArrIndex++;\n                arr1Index++;\n            }\n            else{\n                comparisonsArr.push([arr2Index, arr1Index]);\n                tempArr[tempArrIndex] = arr[arr2Index];\n                tempArrIndex++;\n                arr2Index++;\n            }\n        }\n\n        animations[\"startPos\"].push(start);\n        animations[\"values\"].push(tempArr);\n        animations[\"midPos\"].push(mid);\n        animations[\"endPos\"].push(end);\n        animations[\"comparisons\"].push(comparisonsArr);\n        for(let i = 0; i<tempArrIndex;i++){\n            arr[start] = tempArr[i];\n            start++;\n        }\n    }\n\n    animateMSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n\n            console.log(hMult);\n\n            for(let i= 0; i<animations[\"startPos\"].length; i++){\n            setTimeout(()=>{\n                let start = animations[\"startPos\"][i],\n                    arrLength = animations[\"values\"][i].length;\n                for(let j= start, t=0; j<(start+arrLength); j++, t++){\n                    setTimeout(()=>{\n                        let mid = animations[\"midPos\"][i],\n                            end = animations[\"endPos\"][i];\n                            // compare1 = animations[\"comparisons\"][i][t][0],\n                            // compare2 = animations[\"comparisons\"][i][t][1];\n                        \n                        array_bar[start].style.backgroundColor = \"red\";\n                        array_bar[mid].style.backgroundColor = \"green\";\n                        array_bar[end].style.backgroundColor = \"blue\";\n\n                        // array_bar[compare1].style.backgroundColor = \"red\";\n                        // array_bar[compare2].style.backgroundColor = \"red\";\n\n\n                        setTimeout(()=>{\n                            arr[j] = animations[\"values\"][i][t]; \n                            array_bar[j].style.height = `${arr[j]*hMult}px`;\n                        }, t*(TIME/(2*arrLength)));\n\n                        setTimeout(()=>{    \n                            array_bar[start].style.backgroundColor = \"lightblue\";\n                            array_bar[mid].style.backgroundColor = \"lightblue\";\n                            array_bar[end].style.backgroundColor = \"lightblue\";\n\n                            // array_bar[compare1].style.backgroundColor = \"lightblue\";\n                            // array_bar[compare1].style.backgroundColor = \"lightblue\";\n\n                        }, TIME);\n                    },t*(TIME/arrLength));                   \n                }\n            }, i*(TIME+5));      \n        }\n\n        this.sortCompleteAnimation(animations[\"startPos\"].length - 1);\n    }\n    //END OF MERGESORT ANIMATION FUNCTION(S)\n\n\n    //BEADSORT ANIMATION FUNCTION(S)\n    beadSort(){\n        const arr = this.state.array,\n            animations = [];\n        \n        this.setState({startedSort: true});\n\n        let beadMatrix = this.numberToBead(arr);\n            \n        for(let i = 0; i<beadMatrix.length;i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length; j++){\n                if(beadMatrix[i][j]===false){\n                    beadMatrix[i][j] = true;\n                    counter++;\n                }\n            }\n\n            for(let k=0; k<counter; k++){\n                beadMatrix[i][k] = false;\n            }\n\n            animations.push(this.beadToNumber(beadMatrix));\n        }\n        \n        this.animateBeadSort(animations);\n\n    }\n\n    animateBeadSort(animations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            length = animations.length,\n            counter = animations[0].length,\n            hMult = this.state.heightMultiplier,\n            TIME = this.state.TIME;\n\n        for(let i = 0; i<length; i++){\n            setTimeout(()=>{\n                for(let j =0; j<counter; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.height = `${animations[i][j]*hMult}px`;\n                    }, j*TIME*3/(10*counter));\n                }\n            }, i*TIME*3/10);\n        }\n\n       this.sortCompleteAnimation(length*3/10)\n    }\n\n    numberToBead(arr){\n        let largest = Math.max(...arr),\n            numInBeads = [],\n            beadMatrix = [];\n        \n        for(let i=0; i< arr.length; i++){\n\n            let beads = new Array(largest);     //Array.fill() needs an array of a defined length to work\n            beads.fill(true, 0,arr[i]);\n            beads.fill(false, arr[i],largest);\n\n            numInBeads.push(beads);\n        }\n\n        for(let i=0; i<largest;i++){\n            let beads = [];\n            for(let j=0; j<numInBeads.length; j++){\n                beads.push(numInBeads[j][i]);\n            }\n            beadMatrix.push(beads);\n        }\n\n        return beadMatrix;\n    }\n\n    beadToNumber(beadMatrix){\n        let size = beadMatrix[0].length,\n            numbers = [];\n        for(let i=0; i<size; i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length;j++){\n                if(beadMatrix[j][i]===true){\n                    counter++;\n                }\n            }\n            numbers.push(counter);\n        }\n    \n        return numbers;\n    }\n\n    //END OF BEADSORT ANIMATION FUNCTION(S)\n\n    \n    //HEAPSORT ANIMATION FUNCTION(S)\n    heapSort(){\n        \n        this.setState({startedSort: true});\n\n        const arr = [...this.state.array],\n            n = arr.length,\n            animations = [];\n\n        //Create initial max heap\n        for(let i = Math.floor(n/2)-1; i>=0;i--){\n            this.heapify(arr, n, i, animations);\n        }\n\n        //swap root node with last element\n        for(let j = n-1; j>=0; j--){\n            this.swap(arr, j, 0);\n            animations.push([j,0]);\n            this.heapify(arr, j, 0, animations);\n        }\n\n        this.animateHeapSort(animations);\n    }\n\n    heapify(arr, n, i, animations){\n        let largest = i,\n            left = 2*i+1,\n            right = 2*i+2;\n        \n        if(left<n && arr[left]>arr[largest]){\n            largest = left;\n        }\n\n        if(right<n && arr[right]>arr[largest]){\n            largest = right;\n        }\n\n        if(largest !== i){\n            this.swap(arr, i, largest);\n            animations.push([i,largest]);\n            this.heapify(arr, n, largest, animations);\n        }\n\n    }\n\n    animateHeapSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n        \n        for(let i=0; i< animations.length; i++){\n            setTimeout(()=>{\n                let elem1 = animations[i][0],\n                elem2 = animations[i][1];\n\n                array_bar[elem1].style.backgroundColor = `red`;\n                array_bar[elem2].style.backgroundColor = `blue`;\n\n                setTimeout(()=>{\n                    this.swap(arr, elem1, elem2);\n                    array_bar[elem1].style.height = `${hMult*arr[elem1]}px`;\n                    array_bar[elem2].style.height = `${hMult*arr[elem2]}px`;\n                }, TIME/20);\n                \n                setTimeout(()=>{\n                    array_bar[elem1].style.backgroundColor = `lightblue`;\n                    array_bar[elem2].style.backgroundColor = `lightblue`;\n                }, TIME/10 - 10);\n            }, i*TIME/10);\n        }\n    \n        this.sortCompleteAnimation(animations.length/10);\n    }\n    //END OF HEAPSORT ANIMATION FUNCTION(S)\n\n\n    //RADIX SORT ANIMATION FUNCTION(S)\n    \n    //END OF RADIXSORT ANIMATION FUNCTION(S)\n\n\n    /**\n    * END OF SORTING ALGORITHM FUNCTIONS\n    */\n    \n    \n    render(){\n        const {array} = this.state,\n            heightMult = this.state.heightMultiplier;\n        \n        return( \n            <>  \n                <nav className = \"navbar\">\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.setArray()}}>Generate New Array</button>\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\n                    <button className=\"nav-btn\" id = \"quick-sort\" onClick = {()=>{this.quickSort()}}>Quick Sort</button>\n                    <button className=\"nav-btn\" id = \"merge-sort\" onClick = {()=>{this.mergeSort()}}>Merge Sort</button>\n                    <button className=\"nav-btn\" id = \"bead-sort\" onClick = {()=>{this.beadSort()}}>Bead Sort</button>\n                    <button className=\"nav-btn\" id = \"heap-sort\" onClick = {()=>{this.heapSort()}}>Heap Sort</button>\n                    <button className=\"nav-btn\" id = \"radix-sort\" onClick = {()=>{this.radixSort()}}>Radix Sort</button>\n                    <button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>\n                </nav>\n                <div className=\"array-container\">\n                    <div className=\"array-bars\">\n                    {\n                        array.map((value, idx) => (\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value*heightMult}px`}}></div>\n                        ))\n                    } \n                    </div>\n                </div>\n            </>\n        );\n    }\n  \n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    testAlgorithms(){\n        for(let i= 0; i<100; i++){\n            const arr = [];\n            for(let j=0; j< this.getRandomInt(1,20); j++){\n                arr.push(this.getRandomInt(0,1000));\n            }\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\n                //bSortedArray = bubbleSortAlg(arr),\n                //sSortedArray = this.selectionSort(arr),\n                //iSortedArray = this.insertionSort(arr),\n                //qSortedArray = this.quickSortAlg(arr, 0, arr.length - 1),\n                //mSortedArray = this.mergeSort(arr),\n                //bdSortedArray =  this.beadSort(arr),\n                hSortedArray = this.heapSort(arr);\n\n\n\n            console.log(this.arraysAreEqual(jsSortedArr, hSortedArray));\n        }\n    }\n\n    arraysAreEqual(arr1, arr2){\n        if(arr1.length !== arr2.length){\n            return false;\n        }\n\n        for(let i =0; i<arr1.length; i++){\n            if(arr1[i] !== arr2[i]){\n                console.log(arr1[i], arr2[i]);\n                return false\n            }\n        }\n\n        return true;\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}