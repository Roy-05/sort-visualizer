{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","startedBubbleSort","startedSelectionSort","sorted","TIME","this","setArray","prevProps","prevState","nav_btn","document","getElementsByClassName","forEach","btn","disabled","setState","resetArray","window","screen","width","i","getArraySize","push","getRandomInt","arr","array_bar","setTimeout","length","style","backgroundColor","j","temp","arr1_height","arr2_height","height","minimum","pos","newPos","insertionSortHelper","slice","splice","counter","sortCompleteAnimation","size","elem","origPos","className","id","onClick","bubbleSort","selectionSort","insertionSort","testAlgorithms","map","value","idx","key","min","max","Math","floor","random","jsSortedArr","sort","a","b","iSortedArray","console","log","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0778a779.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            startedBubbleSort: false,\n            startedSelectionSort: false,\n            sorted: false,\n            TIME: 500\n        };\n    }\n\n    componentDidMount(){\n        this.setArray();    \n    }\n\n    componentDidUpdate(prevProps, prevState){\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\n    \n        if(this.state.startedBubbleSort ){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.startedSelectionSort){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.sorted){\n            \n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = false;\n            });\n\n            this.setState({\n                startedBubbleSort: false,\n                startedSelectionSort: false,\n                sorted: false\n            });\n\n            this.resetArray();\n        }\n    }\n\n    getArraySize(){\n        let deviceWidth = window.screen.width,\n            arraySize;\n        if(deviceWidth < 400){\n            arraySize = 50;\n        }\n        else{\n            arraySize = 75;\n        }\n\n        return arraySize;\n    }\n\n    setArray(){\n        const array = [];\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,500))\n        }\n\n        this.setState({array});\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,500))\n        }\n\n        this.setState({array});\n             \n    }\n\n    bubbleSort(){\n        const arr = this.state.array,    \n            array_bar = document.getElementsByClassName('array-elem');\n\n        this.setState({startedBubbleSort: true});\n\n        for(let i =0; i<arr.length-1; i++){\n            setTimeout(()=>{ \n                if(i===0){\n                    setTimeout(()=>{array_bar[arr.length-i-1].style.backgroundColor = 'green';},400)\n                }\n                else{\n                    array_bar[arr.length-i].style.backgroundColor = 'green';\n                }\n                for(let j=0; j<arr.length-i-1; j++){\n                    setTimeout(()=>{\n                        array_bar[j+1].style.backgroundColor = 'red';\n                        array_bar[j].style.backgroundColor = 'red';\n                        setTimeout(()=>{\n                            if(arr[j] > arr[j+1]){\n                            \n                                let temp = arr[j],\n                                    arr1_height = arr[j],\n                                    arr2_height = arr[j+1];\n                                arr[j] = arr[j+1];\n                                arr[j+1] = temp;\n                                array_bar[j].style.height = `${arr2_height}px`;\n                                array_bar[j+1].style.height = `${arr1_height}px`;\n                                array_bar[j+1].style.backgroundColor = 'green';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                            else{\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                        }, 4);\n\n                        if(i===arr.length-2){\n                            setTimeout(()=>{\n                                array_bar[j+1].style.backgroundColor = 'green';                                    \n                            }, 400);\n\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = 'green';                                    \n                            }, 800);\n                        }\n                    }, j*4);\n                }\n            },i*400);  \n        }        \n\n        setTimeout(()=>{\n            this.setState({sorted: true})\n        }, arr.length*400+1750);\n\n    }    \n\n    selectionSort(){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\");\n        \n        this.setState({startedSelectionSort: true});\n\n        for(let i=0; i<arr.length-1; i++){\n            let minimum = i; //Declare minimum here\n            setTimeout(()=>{\n                for(let j = i+1; j<arr.length; j++){\n                    setTimeout(()=>{\n                        //Getting a warning for these references:\n                        array_bar[j].style.backgroundColor = 'red';\n                        array_bar[minimum].style.backgroundColor = 'blue';\n                        setTimeout(()=>{\n                            if(arr[j] < arr[minimum]){\n                            array_bar[minimum].style.backgroundColor = 'lightblue';\n                            minimum = j; \n                            }  \n                            else{\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }  \n                        }, 4);\n                    }, (j-1)*4);    \n                }\n                setTimeout(()=>{\n                    let temp = arr[i],\n                    arr1_height = arr[minimum],\n                    arr2_height = arr[i];\n\n                    arr[i] = arr[minimum];\n                    arr[minimum] = temp;\n\n                    array_bar[i].style.height = `${arr1_height}px`;\n                    array_bar[minimum].style.height = `${arr2_height}px`;\n    \n                    array_bar[i].style.backgroundColor = \"green\";\n                    if(i !== minimum){\n                        array_bar[minimum].style.backgroundColor = 'lightblue';\n                    }\n                }, 400);\n                \n\n                if(i === arr.length-2){\n                    setTimeout(()=>{\n                        array_bar[i+1].style.backgroundColor = \"green\";\n                    },800);\n                }\n\n            }, i*400);\n        }\n\n        setTimeout(()=>{\n            this.setState({sorted: true})\n        }, arr.length*400+1750);\n\n    }\n\n    insertionSort(){\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME;\n        \n        for(let i=0; i<arr.length; i++){\n            setTimeout(()=>{\n                let pos = i;\n\n                /*\n                returns the pos where the last element\n                of the passed array segment needs to be moved to\n                */\n                let newPos = this.insertionSortHelper(arr.slice(0,i+1), pos); \n\n                if(newPos !== pos)\n                {\n                    //This inserts the value of arr[pos] on index newPos, removing 0 elements\n                    arr.splice(newPos,0,arr[pos]);\n\n                    /*\n                    This removes 1 element from the array starting at pos+1 \n                    [+1 because a new element is added in the previous line]\n                    */\n                    arr.splice(pos+1,1);\n                    \n                    /*\n                    Animate swapping of element at index j with j-1\n                    till it reaches the desired position [newPos]\n                    */\n                    for(let j=pos, counter=0; j>newPos; j--, counter++){\n                        /*\n                        The timestamps can be understood as follows:\n                        At t=0: Initialize Colors\n                        At t=t/2: Swap Values\n                        At t=t: Reset colors to original for next Iteration\n                        */\n                        setTimeout(()=>{\n\n                            //Initialize current and preceding elem to BLUE and RED\n                            array_bar[j-1].style.backgroundColor = 'red';\n                            array_bar[j].style.backgroundColor = 'blue';\n\n                            //SWAP Values\n                            setTimeout(()=>{\n                                array_bar[j].style.height = `${arr[j]}px`;\n                                array_bar[j-1].style.height = `${arr[newPos]}px`;\n                            }, TIME/(2*(pos-newPos)));\n\n                            /*\n                            SET current last element to lightblue \n                            so it can be reinitialized next iteration\n                            */\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = 'lightblue' ;\n                                \n                                if(j===newPos+1){\n                                    array_bar[newPos].style.backgroundColor = 'lightblue';\n                                }\n                            }, (TIME/(pos-newPos)));\n\n                        \n                        }, counter*(TIME/(pos-newPos)));    \n                    }\n                }\n                /*\n                Simple Blink animation to indicate \n                that the element does not move position\n                */\n                else{\n                    array_bar[i].style.backgroundColor = 'red';\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 150);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'red';\n                    }, 300);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 450);\n                }\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation();\n    }\n\n    sortCompleteAnimation(){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            size = this.getArraySize(),\n            TIME = this.state.TIME; \n\n        setTimeout(()=>{\n            for(let i=size-1, counter =0; i>=0; i--, counter++){\n                setTimeout(()=>{\n                    array_bar[i].style.backgroundColor = \"green\";\n                }, counter*30);\n            }\n        }, (size+1)*TIME);\n\n        setTimeout(()=>{\n                [...array_bar].forEach(elem=>{\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 350);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"green\";\n                    }, 700);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 1000);\n                })\n        }, size*(TIME+30) + 200); //200ms for delay\n\n        setTimeout(()=>{\n            this.resetArray();\n        }, size*(TIME+30) + 1200 + 500); //1200ms for previous setTimeout to complete + 500ms delay     \n    }\n    \n\n    //takes in an array and returns the index where the last element should inserted\n    insertionSortHelper(arr, pos){\n        let origPos = pos;\n        while(pos>0 && arr[origPos]<arr[pos-1]){\n            pos--;\n        }\n\n        return pos;\n    }\n\n    render(){\n        const {array} = this.state;\n        \n        return( \n            <>  \n                <nav className = \"navbar\">\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.resetArray()}}>Generate New Array</button>\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\n                    <button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>\n                </nav>\n                <div className=\"array-container\">\n                    {\n                        array.map((value, idx) => (\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value}px`}}></div>\n                        ))\n                    } \n                </div>\n            </>\n        );\n    }\n  \n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    testAlgorithms(){\n        for(let i= 0; i<100; i++){\n            const arr = [];\n            for(let j=0; j< this.getRandomInt(1,20); j++){\n                arr.push(this.getRandomInt(-1000,1000));\n            }\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\n                //bSortedArray = bubbleSortAlg(arr),\n                //sSortedArray = this.selectionSort(arr),\n                iSortedArray = this.insertionSort(arr);\n\n\n            console.log(this.arraysAreEqual(jsSortedArr, iSortedArray));\n        }\n    }\n\n    arraysAreEqual(arr1, arr2){\n        if(arr1.length !== arr2.length){\n            return false;\n        }\n\n        for(let i =0; i<arr1.length; i++){\n            if(arr1[i] !== arr2[i]){\n                console.log(arr1[i], arr2[i]);\n                return false\n            }\n        }\n\n        return true;\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}