{"version":3,"sources":["SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["bubbleSortAlg","arr","temp","length","i","j","SortingVisualizer","props","state","array","this","resetArray","push","getRandomInt","setState","array_bar","document","getElementsByClassName","setTimeout","arr1_height","arr2_height","style","height","backgroundColor","console","log","className","onClick","bubbleSort","testAlgorithms","map","value","idx","key","min","max","Math","floor","random","jsSortedArr","slice","sort","a","b","bSortedArray","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2550cedc.chunk.js","sourcesContent":["export function bubbleSortAlg(arr) {\r\n    var temp,\r\n        length = arr.length;\r\n\r\n    for(let i =0; i<length-1; i++){\r\n        for(let j=0; j<length-i-1; j++){\r\n            if(arr[j] > arr[j+1]){\r\n                temp = arr[j];\r\n                arr[j] = arr[j+1];\r\n                arr[j+1] = temp;\r\n            }  \r\n        }\r\n    }  \r\n\r\n    return arr\r\n}\r\n","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport {bubbleSortAlg} from '../SortingAlgorithms/BubbleSort';\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();             \r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i = 0; i<100; i++){\r\n            array.push(this.getRandomInt(1,500))\r\n        }\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    bubbleSort(){\r\n        const arr = this.state.array;     \r\n        const array_bar = document.getElementsByClassName('array-elem');\r\n        \r\n        for(let i =0; i<arr.length-1; i++){\r\n            setTimeout(()=>{\r\n                for(let j=0; j<arr.length-i-1; j++){\r\n                    if(arr[j] > arr[j+1]){\r\n                        let temp = arr[j],\r\n                            arr1_height = arr[j],\r\n                            arr2_height = arr[j+1];\r\n                        arr[j] = arr[j+1];\r\n                        arr[j+1] = temp;\r\n                        setTimeout(() => {\r\n                            array_bar[j].style.height = `${arr2_height}px`;\r\n                            array_bar[j+1].style.backgroundColor = 'red';\r\n                            array_bar[j].style.backgroundColor = 'lightblue';\r\n                            array_bar[j+1].style.height = `${arr1_height}px`;\r\n                        }, 500);\r\n                    }\r\n                }\r\n            }, i*300);  \r\n        }\r\n\r\n        console.log(arr);\r\n    }    \r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        return( \r\n            <>  \r\n                <nav className = \"navbar\">\r\n                    <button className=\"gen-new-arr\" onClick = {()=>{this.resetArray()}}>Generate New Array</button>\r\n                    <button className=\"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\r\n                    <button className=\"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>\r\n                </nav>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div className = \"array-elem\" key = {idx} style = {{height: `${value}px`}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    testAlgorithms(){\r\n        for(let i= 0; i<100; i++){\r\n            const arr = [];\r\n            for(let j=0; j< this.getRandomInt(1,1000); j++){\r\n                arr.push(this.getRandomInt(-1000,1000));\r\n            }\r\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\r\n                bSortedArray = bubbleSortAlg(arr);\r\n\r\n            console.log(this.arraysAreEqual(jsSortedArr, bSortedArray));\r\n        }\r\n    }\r\n\r\n    arraysAreEqual(arr1, arr2){\r\n        if(arr1.length !== arr2.length){\r\n            return false;\r\n        }\r\n\r\n        for(let i =0; i<arr1.length; i++){\r\n            if(arr1[i] !== arr2[i]){\r\n                console.log(arr1[i], arr2[i]);\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}