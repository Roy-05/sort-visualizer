{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","width","window","innerWidth","height","innerHeight","heightMultiplier","startedSort","isSorted","TIME","this","setArray","updateDimensions","addEventListener","bind","removeEventListener","prevProps","prevState","nav_btn","document","getElementsByClassName","setState","setHeightMultiplier","forEach","btn","disabled","updateBrowserWidth","updateBrowserHeight","Math","abs","arraySize","floor","i","getArraySize","push","getRandomInt","max","arr","j","temp","min","random","iterations","array_bar","size","colors","getColors","setTimeout","style","backgroundColor","elem","hMult","swap","length","sortCompleteAnimation","minimum","counter","pos","newPos","insertionSortHelper","slice","splice","origPos","arrCopy","end","animations","quickSortRecursive","animateQSort","start","pivotIndex","partition","pivotValue","t","idx1","idx2","pivot","mergeSortRecursive","animateMSort","mid","merge","arr1Index","arr2Index","tempArr","arrLength","beadMatrix","numberToBead","k","beadToNumber","animateBeadSort","largest","numInBeads","beads","Array","fill","numbers","n","heapify","animateHeapSort","left","right","elem1","elem2","maxNum","divisor","buckets","map","num","concat","trunc","animateRadixSort","ceil","log10","console","log","className","id","onClick","bubbleSort","selectionSort","insertionSort","quickSort","mergeSort","beadSort","heapSort","radixSort","value","idx","key","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64577ea5.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            width: window.innerWidth,\n            height: window.innerHeight*0.7,\n            heightMultiplier: 1,\n            startedSort: false,\n            isSorted: false,\n            TIME: 500\n        };\n    }   \n\n    /**\n     * Add event listener\n     */\n    componentDidMount(){\n        this.setArray();\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions.bind(this));    \n    }\n\n    /**\n     * Remove event listener\n     */\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions.bind(this));\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\n\n        if(prevState.array !== this.state.array){\n            this.setState({\n                heightMultiplier: this.setHeightMultiplier()\n            })\n        }\n\n        if(this.state.startedSort ){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.isSorted){\n            \n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = false;\n            });\n\n            this.setState({\n                startedSort: false,\n                isSorted: false\n            });\n\n            this.setArray();\n        }\n    }\n\n    //call this function on window resize\n    updateDimensions(){\n        this.updateBrowserWidth();\n        this.updateBrowserHeight();\n    }\n\n    updateBrowserWidth(){\n        if(Math.abs(this.state.width-window.innerWidth)>12){\n            this.setState({\n                width: window.innerWidth\n            });\n\n            this.setArray();\n        }\n    }\n\n    updateBrowserHeight(){\n        if(this.state.height !== window.innerHeight*0.7){\n            this.setState({\n                height: window.innerHeight*0.7,\n                heightMultiplier: this.setHeightMultiplier()\n            })\n        }\n    }\n\n    getArraySize(){\n        let width = this.state.width;\n\n        //12 = 12px(width) + [2px + 2px](margin) + 1px(border)\n        let arraySize = Math.floor((width - 100)/17);\n\n        return (arraySize<75) ? arraySize : 75;\n    }\n\n    getColors(){\n        return {\n            \"base\": \"#6DB5E5\",\n            \"primary\": \"#B94DC4\",\n            \"secondary\": \"#C47D4D\",\n            \"completion\": \"#58C44D\"\n        }\n    }\n\n    setArray(){\n        const array = [];\n\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,100))\n        }\n\n        this.setState({\n            array: array\n        });\n    }\n\n    setHeightMultiplier(){\n        const height = this.state.height,\n            MAX = Math.max(...this.state.array);\n\n        return (height-10)/MAX;    \n    }\n    \n    swap(arr, i, j){\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n\n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n\n    sortCompleteAnimation(iterations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            size = this.getArraySize(),\n            TIME = this.state.TIME,\n            colors = this.getColors();\n\n        setTimeout(()=>{\n            for(let i=0; i<size; i++){\n                setTimeout(()=>{\n                    array_bar[i].style.backgroundColor = colors[\"completion\"];\n                }, i*30);\n            }\n        }, (iterations+1)*TIME);\n\n        setTimeout(()=>{\n                [...array_bar].forEach(elem=>{\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = colors[\"base\"];\n                    }, 350);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = colors[\"completion\"];\n                    }, 700);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = colors[\"base\"];\n                    }, 1000);\n                })\n        }, iterations*TIME + size*30 + 200); //200ms for delay\n\n        setTimeout(()=>{\n            this.setState({isSorted: true});\n        }, iterations*TIME + size*30 + 1200 + 500); //1200ms for previous setTimeout to complete + 500ms delay     \n    }\n\n \n    /**\n    * START OF SORTING ALGORITHM FUNCTIONS\n    */\n\n\n    //BUBBLE SORT ANIMATION FUNCTION(S)\n    bubbleSort(){\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,    \n            array_bar = document.getElementsByClassName('array-elem'),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier,\n            colors = this.getColors();\n\n\n        for(let i =0; i<arr.length; i++){\n            setTimeout(()=>{ \n                for(let j=0; j<arr.length-i-1; j++){\n                    setTimeout(()=>{\n                        array_bar[j+1].style.backgroundColor = colors[\"secondary\"];\n                        array_bar[j].style.backgroundColor = colors[\"primary\"];\n                        setTimeout(()=>{\n                            if(arr[j] > arr[j+1]){\n\n                                this.swap(arr, j, j+1);\n                            \n                                array_bar[j].style.height = `${arr[j]*hMult}px`;\n                                array_bar[j+1].style.height = `${arr[j+1]*hMult}px`;\n\n                                array_bar[j+1].style.backgroundColor = colors[\"base\"];\n                                array_bar[j].style.backgroundColor = colors[\"base\"];\n                            }\n                            else{\n                                array_bar[j+1].style.backgroundColor = colors[\"base\"];\n                                array_bar[j].style.backgroundColor = colors[\"base\"];\n                            }\n                        }, TIME/(arr.length-i-1));\n                    }, j*TIME/(arr.length-i-1));\n                }\n            },i*TIME);  \n        }        \n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF BUBBLE SORT ANIMATION FUNCTION(S)    \n\n\n    //SELECTION SORT ANIMATION FUNCTION(S)\n    selectionSort(){\n\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier,\n            colors = this.getColors();\n\n\n        for(let i=0; i<arr.length-1; i++){\n            setTimeout(()=>{\n                let minimum =i;\n                for(let j = i+1, counter=0; j<arr.length; j++, counter++){\n                    setTimeout(()=>{\n                        array_bar[j].style.backgroundColor = colors[\"primary\"];\n                        array_bar[minimum].style.backgroundColor = colors[\"secondary\"];\n                        setTimeout(()=>{\n                            if(arr[j] < arr[minimum]){\n                            array_bar[minimum].style.backgroundColor = colors[\"base\"];\n                            minimum = j; \n                            }  \n                            else{\n                                array_bar[j].style.backgroundColor = colors[\"base\"];\n                            }  \n                        }, TIME/(2*(arr.length-i-1)));\n                    }, counter*TIME/(arr.length-i-1));    \n                }\n\n                setTimeout(()=>{\n\n                    this.swap(arr, i, minimum);\n            \n                    array_bar[i].style.height = `${arr[i]*hMult}px`;\n                    array_bar[minimum].style.height = `${arr[minimum]*hMult}px`;\n                    array_bar[minimum].style.backgroundColor = colors[\"base\"];\n\n                }, TIME);\n\n                \n\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF SELECTION SORT ANIMATION FUNCTION(S)\n\n\n    //INSERTION SORT ANIMATION FUNCTION(S)\n    insertionSort(){\n\n        //Disable nav buttons [AND TO HANDLE OTHER ACTIONS WHEN NEEDED]\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier,\n            colors = this.getColors();\n        \n        for(let i=0; i<arr.length; i++){\n            setTimeout(()=>{\n                let pos = i;\n\n                /*\n                returns the pos where the last element\n                of the passed array segment needs to be moved to\n                */\n                let newPos = this.insertionSortHelper(arr.slice(0,i+1), pos); \n\n                if(newPos !== pos)\n                {\n                    //This inserts the value of arr[pos] on index newPos, removing 0 elements\n                    arr.splice(newPos,0,arr[pos]);\n                    \n                    /*\n                    This removes 1 element from the array starting at pos+1 \n                    [+1 because a new element is added in the previous line]\n                    */\n                    arr.splice(pos+1,1);\n    \n                    /*\n                    Animate swapping of element at index j with j-1\n                    till it reaches the desired position [newPos]\n                    */\n                    for(let j=pos, counter=0; j>newPos; j--, counter++){\n                        /*\n                        The timestamps can be understood as follows:\n                        At t=0: Initialize Colors\n                        At t=t/2: Swap Values\n                        At t=t: Reset colors to original for next Iteration\n                        */\n                        setTimeout(()=>{\n\n                            //Initialize current and preceding elem to BLUE and RED\n                            array_bar[j-1].style.backgroundColor = colors[\"primary\"];\n                            array_bar[j].style.backgroundColor = colors[\"secondary\"];\n                            array_bar[pos].style.backgroundColor = colors[\"completion\"];\n\n                            //SWAP Values\n                            setTimeout(()=>{\n                                array_bar[j].style.height = `${arr[j]*hMult}px`;\n                                array_bar[j-1].style.height = `${arr[newPos]*hMult}px`;\n                            }, TIME/(2*(pos-newPos)));\n\n                            /*\n                            SET current last element to lightblue \n                            so it can be reinitialized next iteration\n                            */\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = colors[\"base\"] ;\n                            \n                                if(j===newPos+1){\n                                    array_bar[newPos].style.backgroundColor = colors[\"base\"];\n                                }\n                            }, (TIME/(pos-newPos)));\n\n                            setTimeout(()=>{\n                                array_bar[pos].style.backgroundColor = colors[\"base\"] ;\n                            }, TIME);\n\n                        }, counter*(TIME/(pos-newPos)));    \n                       \n                    }\n                }\n                /*\n                Simple Blink animation to indicate \n                that the element does not move position\n                */\n                else{\n                    \n                    array_bar[i].style.backgroundColor = colors[\"completion\"];\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = colors[\"base\"];\n                    }, 150);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = colors[\"completion\"];\n                    }, 300);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = colors[\"base\"];\n                    }, 450);\n                }\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n    }\n\n    //takes in an array and returns the index where the last element should inserted\n    insertionSortHelper(arr, pos){\n        let origPos = pos;\n        while(pos>0 && arr[origPos]<arr[pos-1]){\n            pos--;\n        }\n\n        return pos;\n    }   \n    //END OF INSERTION SORT ANIMATION FUNCTION(S)\n\n\n    // QUICKSORT ANIMATION FUNCTION(S)\n    quickSort(){\n\n        this.setState({startedSort: true});\n\n        const arrCopy = [...this.state.array],  //Create a copy of the original array for manipulations\n            start = 0,\n            end = arrCopy.length - 1,\n            animations = {\n                \"pos\": [],      //store the index of elements that will be swapped\n                \"pivot\": [],    //store the pivots for each run\n                \"counter\": [0]  //count how many swaps take place\n            };\n\n        this.quickSortRecursive(arrCopy, start, end, animations);\n\n        this.animateQSort( animations);\n\n    }\n\n    quickSortRecursive(arr, start, end, animations){\n        if(start >= end){\n            return;\n        }\n\n        let pivotIndex = this.partition(arr, start, end, animations);\n        this.quickSortRecursive(arr, start, pivotIndex-1, animations);\n        this.quickSortRecursive(arr, pivotIndex+1, end, animations);\n    }\n\n    partition(arr, start, end, animations){\n\n        let pivotValue = arr[end],\n            i = start;\n\n        for(let j=start; j<end; j++){\n            if(arr[j] < pivotValue){\n                animations[\"pos\"].push([j,i]);\n                \n                this.swap(arr, j, i);\n                i++\n            }     \n        }\n        \n        animations[\"pos\"].push([i,end]);\n        animations[\"pivot\"].push([i,end]);\n        animations[\"counter\"].push(animations[\"pos\"].length);\n        this.swap(arr, i, end);\n        \n        return i; \n    }\n\n    animateQSort(animations){\n\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier,\n            colors = this.getColors();\n\n        for(let i=0; i <animations[\"counter\"].length - 1; i++){\n            setTimeout(()=>{\n                for(let j=animations[\"counter\"][i], t=0; j<animations[\"counter\"][i+1]; j++, t++){\n                    setTimeout(()=>{\n                        let idx1 = animations[\"pos\"][j][0],\n                            idx2 = animations[\"pos\"][j][1],\n                            pivot = animations[\"pivot\"][i][1];\n                        \n                        array_bar[idx1].style.backgroundColor = colors[\"primary\"];\n                        array_bar[idx2].style.backgroundColor = colors[\"secondary\"];\n\n                        array_bar[pivot].style.backgroundColor = colors[\"completion\"];\n\n                        this.swap(arr, idx1, idx2);\n                    \n                        setTimeout(()=>{\n                            array_bar[idx1].style.height = `${arr[idx1]*hMult}px`;\n                            array_bar[idx2].style.height = `${arr[idx2]*hMult}px`;\n                        }, TIME/(2*(animations[\"counter\"][i+1]-animations[\"counter\"][i])));\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.backgroundColor = colors[\"base\"];\n                            array_bar[idx2].style.backgroundColor = colors[\"base\"];\n                        }, TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                        \n                    }, t*TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                }\n            }, i*TIME);\n        }\n\n    this.sortCompleteAnimation(animations[\"counter\"].length - 1);\n\n    }\n    //END OF QUICKSORT ANIMATION FUNCTION(S)\n\n\n    //MERGESORT ANIMATION FUNCTION(S)\n    mergeSort(){\n\n        this.setState({startedSort: true})\n\n        const arr = [...this.state.array],\n            start = 0,\n            end = arr.length-1,\n            animations = {\n                \"startPos\": [],\n                \"values\": [],\n                \"endPos\": [],\n                \"midPos\": [],\n                \"heights\": []\n            };\n\n        this.mergeSortRecursive(arr,start, end, animations);\n\n        this.animateMSort(animations);\n    }\n\n    mergeSortRecursive(arr, start, end, animations){\n        if(start>=end){\n            return;\n        }\n\n        let mid = Math.floor((start+end)/2);\n\n        this.mergeSortRecursive(arr, start, mid, animations);\n        this.mergeSortRecursive(arr, mid+1, end, animations);\n        this.merge(arr, start, mid, end, animations);\n    }\n\n    merge(arr, start, mid, end, animations) {\n        let arr1Index = start,\n            arr2Index = mid +1,\n            tempArr = [];\n\n        for(let i = start; i<=end; i++){\n            if(arr1Index > mid){\n                tempArr.push(arr[arr2Index]);\n                arr2Index++;\n            }\n            else if(arr2Index > end){\n                tempArr.push(arr[arr1Index]);\n                arr1Index++;\n            }\n            else if(arr[arr1Index] < arr[arr2Index]){\n                tempArr.push(arr[arr1Index]);\n                arr1Index++;\n            }\n            else{\n                tempArr.push(arr[arr2Index]);\n                arr2Index++;\n            }\n        }\n\n        animations[\"startPos\"].push(start);\n        animations[\"values\"].push(tempArr);\n        animations[\"midPos\"].push(mid);\n        animations[\"endPos\"].push(end);\n        \n        for(let i = 0; i<tempArr.length;i++){\n            arr[start] = tempArr[i];\n            start++;\n        }\n    }\n\n    animateMSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier,\n            colors = this.getColors();\n            \n        for(let i= 0; i<animations[\"startPos\"].length; i++){\n            setTimeout(()=>{\n                let start = animations[\"startPos\"][i],\n                    arrLength = animations[\"values\"][i].length;\n                for(let j= start, t=0; j<(start+arrLength); j++, t++){\n                    setTimeout(()=>{\n                        let mid = animations[\"midPos\"][i],\n                            end = animations[\"endPos\"][i];\n\n                        array_bar[start].style.backgroundColor = colors[\"primary\"];\n                        array_bar[mid].style.backgroundColor = colors[\"completion\"];\n                        array_bar[end].style.backgroundColor = colors[\"secondary\"];\n\n                        setTimeout(()=>{  \n                            arr[j] = animations[\"values\"][i][t]; \n                        }, t*(TIME/(6*arrLength)));\n\n                        setTimeout(()=>{  \n                            array_bar[j].style.height = `${arr[j]*hMult}px`\n\n                        }, t*(TIME/(3*arrLength)));\n\n                        setTimeout(()=>{    \n                            array_bar[start].style.backgroundColor = colors[\"base\"];\n                            array_bar[mid].style.backgroundColor = colors[\"base\"];\n                            array_bar[end].style.backgroundColor = colors[\"base\"];\n\n                        }, TIME);\n                    },t*(TIME/arrLength));                   \n                }\n            }, i*(TIME+5));      \n        }\n\n        this.sortCompleteAnimation(animations[\"startPos\"].length - 1);\n    }\n    //END OF MERGESORT ANIMATION FUNCTION(S)\n\n\n    //BEADSORT ANIMATION FUNCTION(S)\n    beadSort(){\n        const arr = this.state.array,\n            animations = [];\n        \n        this.setState({startedSort: true});\n\n        let beadMatrix = this.numberToBead(arr);\n            \n        for(let i = 0; i<beadMatrix.length;i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length; j++){\n                if(beadMatrix[i][j]===false){\n                    beadMatrix[i][j] = true;\n                    counter++;\n                }\n            }\n\n            for(let k=0; k<counter; k++){\n                beadMatrix[i][k] = false;\n            }\n\n            animations.push(this.beadToNumber(beadMatrix));\n        }\n        \n        this.animateBeadSort(animations);\n\n    }\n\n    animateBeadSort(animations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            length = animations.length,\n            counter = animations[0].length,\n            hMult = this.state.heightMultiplier,\n            TIME = this.state.TIME;\n\n        for(let i = 0; i<length; i++){\n            setTimeout(()=>{\n                for(let j =0; j<counter; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.height = `${animations[i][j]*hMult}px`;\n                    }, j*TIME*3/(10*counter));\n                }\n            }, i*TIME*3/10);\n        }\n\n       this.sortCompleteAnimation(length*3/10)\n    }\n\n    numberToBead(arr){\n        let largest = Math.max(...arr),\n            numInBeads = [],\n            beadMatrix = [];\n        \n        for(let i=0; i< arr.length; i++){\n\n            let beads = new Array(largest);     //Array.fill() needs an array of a defined length to work\n            beads.fill(true, 0,arr[i]);\n            beads.fill(false, arr[i],largest);\n\n            numInBeads.push(beads);\n        }\n\n        for(let i=0; i<largest;i++){\n            let beads = [];\n            for(let j=0; j<numInBeads.length; j++){\n                beads.push(numInBeads[j][i]);\n            }\n            beadMatrix.push(beads);\n        }\n\n        return beadMatrix;\n    }\n\n    beadToNumber(beadMatrix){\n        let size = beadMatrix[0].length,\n            numbers = [];\n        for(let i=0; i<size; i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length;j++){\n                if(beadMatrix[j][i]===true){\n                    counter++;\n                }\n            }\n            numbers.push(counter);\n        }\n    \n        return numbers;\n    }\n\n    //END OF BEADSORT ANIMATION FUNCTION(S)\n\n    \n    //HEAPSORT ANIMATION FUNCTION(S)\n    heapSort(){\n        \n        this.setState({startedSort: true});\n\n        const arr = [...this.state.array],\n            n = arr.length,\n            animations = [];\n\n        //Create initial max heap\n        for(let i = Math.floor(n/2)-1; i>=0;i--){\n            this.heapify(arr, n, i, animations);\n        }\n\n        //swap root node with last element\n        for(let j = n-1; j>=0; j--){\n            this.swap(arr, j, 0);\n            animations.push([j,0]);\n            this.heapify(arr, j, 0, animations);\n        }\n\n        this.animateHeapSort(animations);\n    }\n\n    heapify(arr, n, i, animations){\n        let largest = i,\n            left = 2*i+1,\n            right = 2*i+2;\n        \n        if(left<n && arr[left]>arr[largest]){\n            largest = left;\n        }\n\n        if(right<n && arr[right]>arr[largest]){\n            largest = right;\n        }\n\n        if(largest !== i){\n            this.swap(arr, i, largest);\n            animations.push([i,largest]);\n            this.heapify(arr, n, largest, animations);\n        }\n\n    }\n\n    animateHeapSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier,\n            colors = this.getColors();\n        \n        for(let i=0; i< animations.length; i++){\n            setTimeout(()=>{\n                let elem1 = animations[i][0],\n                elem2 = animations[i][1];\n\n                array_bar[elem1].style.backgroundColor = colors[\"primary\"];\n                array_bar[elem2].style.backgroundColor = colors[\"secondary\"];\n\n                setTimeout(()=>{\n                    this.swap(arr, elem1, elem2);\n                    array_bar[elem1].style.height = `${hMult*arr[elem1]}px`;\n                    array_bar[elem2].style.height = `${hMult*arr[elem2]}px`;\n                }, TIME/20);\n                \n                setTimeout(()=>{\n                    array_bar[elem1].style.backgroundColor = colors[\"base\"];\n                    array_bar[elem2].style.backgroundColor = colors[\"base\"];\n                }, TIME/10 - 10);\n            }, i*TIME/10);\n        }\n    \n        this.sortCompleteAnimation(animations.length/10);\n    }\n    //END OF HEAPSORT ANIMATION FUNCTION(S)\n\n\n    //RADIX SORT ANIMATION FUNCTION(S)\n    radixSort(){\n\n        let arr = [...this.state.array],\n            maxNum = Math.max(...arr),\n            divisor = 1,\n            animations = [];//{\n            //     \"arrays\": [],\n            //     \"numOfEach\": []\n            // };\n            // let t = [];\n        while (Math.trunc(maxNum)>0){\n            let buckets = [...Array(10)].map(() => []);\n            arr.forEach(num=>{\n                buckets[Math.floor((num/divisor))%10].push(num);\n            });\n            \n            // buckets.forEach(elem=>{\n            //     t.push(elem.length);\n            // });\n            // console.log(buckets);\n            // console.log(t);\n            // Reconstruct the array by concatinating all sub arrays\n            animations.push([].concat(...buckets));\n            arr = [].concat(...buckets);\n\n            maxNum/=10;\n            divisor *= 10;\n            \n        }\n\n        this.animateRadixSort(animations);\n    }\n\n    animateRadixSort(animations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            hMult = this.state.heightMultiplier,\n            TIME = this.state.TIME;\n\n        let arr = this.state.array,\n            max = Math.max(...arr),\n            counter = Math.ceil(Math.log10(max+1));\n\n        for(let i=0; i<counter; i++){\n            setTimeout(()=>{\n                for(let j=0;j<arr.length;j++){\n                    setTimeout(()=>{\n                        arr[j] = animations[i][j];\n                        array_bar[j].style.height  = `${arr[j]*hMult}px`;\n                    }, j*(TIME*14/arr.length));\n                }\n            },i*TIME*14);\n        }\n\n        this.sortCompleteAnimation(counter*14);\n    }        \n    //END OF RADIXSORT ANIMATION FUNCTION(S)\n\n\n    /**\n    * END OF SORTING ALGORITHM FUNCTIONS\n    */\n    \n    \n    render(){\n        const {array} = this.state,\n            hMult = this.state.heightMultiplier;\n\n        console.log(this.getArraySize());\n        return( \n            <>  \n                <nav className = \"navbar\">\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.setArray()}}>Generate New Array</button>\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\n                    <button className=\"nav-btn\" id = \"quick-sort\" onClick = {()=>{this.quickSort()}}>Quick Sort</button>\n                    <button className=\"nav-btn\" id = \"merge-sort\" onClick = {()=>{this.mergeSort()}}>Merge Sort</button>\n                    <button className=\"nav-btn\" id = \"bead-sort\" onClick = {()=>{this.beadSort()}}>Bead Sort</button>\n                    <button className=\"nav-btn\" id = \"heap-sort\" onClick = {()=>{this.heapSort()}}>Heap Sort</button>\n                    <button className=\"nav-btn\" id = \"radix-sort\" onClick = {()=>{this.radixSort()}}>Radix Sort</button>\n                    {/*<button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>*/}\n                </nav>\n                <div className=\"array-container\">\n                    <div className=\"array-bars\">\n                    {\n                        array.map((value, idx) => (\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value*hMult}px`}}></div>\n                        ))\n                    } \n                    </div>\n                </div>\n            </>\n        );\n    }\n    \n    /*\n    testAlgorithms(){\n        for(let i= 0; i<100; i++){\n            const arr = [];\n            for(let j=0; j< this.getRandomInt(1,100); j++){\n                arr.push(this.getRandomInt(0,1000));\n            }\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\n                //bSortedArray = bubbleSortAlg(arr),\n                //sSortedArray = this.selectionSort(arr),\n                //iSortedArray = this.insertionSort(arr),\n                //qSortedArray = this.quickSortAlg(arr, 0, arr.length - 1),\n                //mSortedArray = this.mergeSort(arr),\n                //bdSortedArray =  this.beadSort(arr),\n                //hSortedArray = this.heapSort(arr),\n                rSortedArray = this.radixSort(arr);\n\n\n\n            console.log(this.arraysAreEqual(jsSortedArr, rSortedArray));\n        }\n    }\n\n    arraysAreEqual(arr1, arr2){\n        if(arr1.length !== arr2.length){\n            return false;\n        }\n\n        for(let i =0; i<arr1.length; i++){\n            if(arr1[i] !== arr2[i]){\n                console.log(arr1[i], arr2[i]);\n                return false\n            }\n        }\n\n        return true;\n    }\n    */\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}