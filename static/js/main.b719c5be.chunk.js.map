{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","animations","startedSort","isSorted","TIME","this","setArray","prevProps","prevState","nav_btn","document","getElementsByClassName","forEach","btn","disabled","setState","window","screen","width","i","getArraySize","push","getRandomInt","array_bar","size","setTimeout","style","backgroundColor","elem","arr","j","temp","swap","height","length","sortCompleteAnimation","minimum","pos","newPos","insertionSortHelper","slice","splice","counter","origPos","arrCopy","end","quickSortRecursive","animateQSort","start","pivotIndex","partition","pivotValue","idx1","idx2","className","id","onClick","bubbleSort","selectionSort","insertionSort","quickSort","testAlgorithms","map","value","idx","key","min","max","Math","floor","random","jsSortedArr","sort","a","b","qSortedArray","quickSortAlg","console","log","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b719c5be.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            animations: [],\n            startedSort: false,\n            isSorted: false,\n            TIME: 500\n        };\n    }\n\n    componentDidMount(){\n        this.setArray();    \n    }\n\n    componentDidUpdate(prevProps, prevState){\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\n    \n        if(this.state.startedSort ){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.isSorted){\n            \n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = false;\n            });\n\n            this.setState({\n                startedSort: false,\n                isSorted: false\n            });\n\n            this.setArray();\n        }\n    }\n\n    getArraySize(){\n        let deviceWidth = window.screen.width,\n            arraySize;\n        if(deviceWidth < 400){\n            arraySize = 50;\n        }\n        else{\n            arraySize = 75;\n        }\n\n        return arraySize;\n    }\n\n    setArray(){\n        const array = [];\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,500))\n        }\n\n        this.setState({array});\n    }\n\n    sortCompleteAnimation(){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            size = this.getArraySize(),\n            TIME = this.state.TIME; \n\n        setTimeout(()=>{\n            for(let i=0; i<size; i++){\n                setTimeout(()=>{\n                    array_bar[i].style.backgroundColor = \"green\";\n                }, i*30);\n            }\n        }, (size+1)*TIME);\n\n        setTimeout(()=>{\n                [...array_bar].forEach(elem=>{\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 350);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"green\";\n                    }, 700);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 1000);\n                })\n        }, size*(TIME+30) + 200); //200ms for delay\n\n        setTimeout(()=>{\n            this.setState({isSorted: true});\n        }, size*(TIME+30) + 1200 + 500); //1200ms for previous setTimeout to complete + 500ms delay     \n    }\n\n    swap(arr, i, j){\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    /**\n    * START OF SORTING ALGORITHM FUNCTIONS\n    */\n\n\n    //BUBBLE SORT ANIMATION FUNCTIONS(S)\n    bubbleSort(){\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,    \n            array_bar = document.getElementsByClassName('array-elem'),\n            TIME = this.state.TIME;\n\n        for(let i =0; i<arr.length; i++){\n            setTimeout(()=>{ \n                for(let j=0; j<arr.length-i-1; j++){\n                    setTimeout(()=>{\n                        array_bar[j+1].style.backgroundColor = 'blue';\n                        array_bar[j].style.backgroundColor = 'red';\n                        setTimeout(()=>{\n                            if(arr[j] > arr[j+1]){\n\n                                this.swap(arr, j, j+1);\n\n                                array_bar[j].style.height = `${arr[j]}px`;\n                                array_bar[j+1].style.height = `${arr[j+1]}px`;\n\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                            else{\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                        }, TIME/(arr.length-i-1));\n                    }, j*TIME/(arr.length-i-1));\n                }\n            },i*TIME);  \n        }        \n\n        this.sortCompleteAnimation();\n\n    }\n    //END OF BUBBLE SORT ANIMATION FUNCTIONS(S)    \n\n\n    //SELECTION SORT ANIMATION FUNCTION(S)\n    selectionSort(){\n\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME;\n\n        for(let i=0; i<arr.length-1; i++){\n            setTimeout(()=>{\n                let minimum =i;\n                for(let j = i+1; j<arr.length; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.backgroundColor = 'red';\n                        array_bar[minimum].style.backgroundColor = 'blue';\n                        setTimeout(()=>{\n                            if(arr[j] < arr[minimum]){\n                            array_bar[minimum].style.backgroundColor = 'lightblue';\n                            minimum = j; \n                            }  \n                            else{\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }  \n                        }, 4);\n                    }, j*4);    \n                }\n                setTimeout(()=>{\n\n                    this.swap(arr, i, minimum)\n\n                    array_bar[i].style.height = `${arr[i]}px`;\n                    array_bar[minimum].style.height = `${arr[minimum]}px`;\n                    array_bar[minimum].style.backgroundColor = 'lightblue';\n\n                }, TIME);\n\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation();\n\n    }\n    //END OF SELECTION SORT ANIMATION FUNCTIONS(S)\n\n\n    //INSERTION SORT ANIMATION FUNCTIONS(S)\n    insertionSort(){\n\n        //Disable nav buttons [AND TO HANDLE OTHER ACTIONS WHEN NEEDED]\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME;\n        \n        for(let i=0; i<arr.length; i++){\n            setTimeout(()=>{\n                let pos = i;\n\n                /*\n                returns the pos where the last element\n                of the passed array segment needs to be moved to\n                */\n                let newPos = this.insertionSortHelper(arr.slice(0,i+1), pos); \n\n                if(newPos !== pos)\n                {\n                    //This inserts the value of arr[pos] on index newPos, removing 0 elements\n                    arr.splice(newPos,0,arr[pos]);\n\n                    /*\n                    This removes 1 element from the array starting at pos+1 \n                    [+1 because a new element is added in the previous line]\n                    */\n                    arr.splice(pos+1,1);\n                    \n                    /*\n                    Animate swapping of element at index j with j-1\n                    till it reaches the desired position [newPos]\n                    */\n                    for(let j=pos, counter=0; j>newPos; j--, counter++){\n                        /*\n                        The timestamps can be understood as follows:\n                        At t=0: Initialize Colors\n                        At t=t/2: Swap Values\n                        At t=t: Reset colors to original for next Iteration\n                        */\n                        setTimeout(()=>{\n\n                            //Initialize current and preceding elem to BLUE and RED\n                            array_bar[j-1].style.backgroundColor = 'red';\n                            array_bar[j].style.backgroundColor = 'blue';\n\n                            //SWAP Values\n                            setTimeout(()=>{\n                                array_bar[j].style.height = `${arr[j]}px`;\n                                array_bar[j-1].style.height = `${arr[newPos]}px`;\n                            }, TIME/(2*(pos-newPos)));\n\n                            /*\n                            SET current last element to lightblue \n                            so it can be reinitialized next iteration\n                            */\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = 'lightblue' ;\n                                \n                                if(j===newPos+1){\n                                    array_bar[newPos].style.backgroundColor = 'lightblue';\n                                }\n                            }, (TIME/(pos-newPos)));\n\n                        \n                        }, counter*(TIME/(pos-newPos)));    \n                    }\n                }\n                /*\n                Simple Blink animation to indicate \n                that the element does not move position\n                */\n                else{\n                    array_bar[i].style.backgroundColor = 'red';\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 150);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'red';\n                    }, 300);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 450);\n                }\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation();\n    }\n\n    //takes in an array and returns the index where the last element should inserted\n    insertionSortHelper(arr, pos){\n        let origPos = pos;\n        while(pos>0 && arr[origPos]<arr[pos-1]){\n            pos--;\n        }\n\n        return pos;\n    }   \n    //END OF INSERTION SORT ANIMATION FUNCTIONS(S)\n\n\n    // QUICKSORT ANIMATION FUNCTIONS(S)\n    quickSort(){\n\n        const arrCopy = [...this.state.array],  //Create a copy of the original array for manipulations\n            start = 0,\n            end = arrCopy.length - 1,\n            animations = [];\n\n        this.quickSortRecursive(arrCopy, start, end, animations);\n\n        this.animateQSort( animations);\n\n    }\n\n    quickSortRecursive(arr, start, end, animations){\n        if(start >= end){\n            return;\n        }\n\n        let pivotIndex = this.partition(arr, start, end, animations);\n        this.quickSortRecursive(arr, start, pivotIndex-1, animations);\n        this.quickSortRecursive(arr, pivotIndex+1, end, animations);\n    }\n\n    partition(arr, start, end, animations){\n\n        let pivotValue = arr[end],\n            i = start;\n\n        for(let j=start; j<end; j++){\n            if(arr[j] < pivotValue){\n                animations.push([j,i]);\n                \n                this.swap(arr, j, i);\n                i++\n            }     \n        }\n        \n        animations.push([i,end]);\n        this.swap(arr, i, end);\n        \n        return i; \n    }\n\n    animateQSort(animations){\n\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array;\n        \n        /*for(let i = 0; i < animations.length; i++){\n            if (animations[i].match(/\\d+ \\d+/)){\n                let elems = animations[i].split(' ').map(x => parseInt(x, 10));\n                swapIndexes.push(elems);\n            }\n        }*/\n\n        for(let j=0; j<animations.length; j++){\n            setTimeout(()=>{\n                let idx1 = animations[j][0],\n                idx2 = animations[j][1];\n        \n                this.swap(arr, idx1, idx2);\n            \n                array_bar[idx1].style.height = `${arr[idx1]}px`;\n                array_bar[idx2].style.height = `${arr[idx2]}px`;\n            }, j*20);\n        }\n\n    }\n    //END OF QUICKSORT ANIMATION FUNCTIONS(S)\n\n\n    /**\n    * END OF SORTING ALGORITHM FUNCTIONS\n    */\n    \n    \n    render(){\n        const {array} = this.state;\n        \n        return( \n            <>  \n                <nav className = \"navbar\">\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.setArray()}}>Generate New Array</button>\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\n                    <button className=\"nav-btn\" id = \"quick-sort\" onClick = {()=>{this.quickSort()}}>Quick Sort</button>\n                    <button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>\n                </nav>\n                <div className=\"array-container\">\n                    {\n                        array.map((value, idx) => (\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value}px`}}></div>\n                        ))\n                    } \n                </div>\n            </>\n        );\n    }\n  \n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    testAlgorithms(){\n        for(let i= 0; i<100; i++){\n            const arr = [];\n            for(let j=0; j< this.getRandomInt(1,20); j++){\n                arr.push(this.getRandomInt(-1000,1000));\n            }\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\n                //bSortedArray = bubbleSortAlg(arr),\n                //sSortedArray = this.selectionSort(arr),\n                //iSortedArray = this.insertionSort(arr),\n                qSortedArray = this.quickSortAlg(arr, 0, arr.length - 1);\n\n\n            console.log(this.arraysAreEqual(jsSortedArr, qSortedArray));\n        }\n    }\n\n    arraysAreEqual(arr1, arr2){\n        if(arr1.length !== arr2.length){\n            return false;\n        }\n\n        for(let i =0; i<arr1.length; i++){\n            if(arr1[i] !== arr2[i]){\n                console.log(arr1[i], arr2[i]);\n                return false\n            }\n        }\n\n        return true;\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}