{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","width","window","innerWidth","height","innerHeight","heightMultiplier","arrayHeights","startedSort","isSorted","TIME","this","setArray","updateDimensions","addEventListener","bind","removeEventListener","prevProps","prevState","nav_btn","document","getElementsByClassName","setState","setHeights","forEach","btn","disabled","updateBrowserWidth","updateBrowserHeight","Math","abs","arraySize","floor","containerHeight","clientHeight","round","i","getArraySize","push","getRandomInt","MAX","max","length","iterations","array_bar","size","setTimeout","style","backgroundColor","elem","arr","j","temp","swap","sortCompleteAnimation","heights","minimum","counter","pos","newPos","insertionSortHelper","slice","splice","origPos","arrCopy","end","animations","quickSortRecursive","animateQSort","start","pivotIndex","partition","pivotValue","t","idx1","idx2","pivot","mergeSortRecursive","animateMSort","mid","merge","arr1Index","arr2Index","tempArr","tempArrIndex","arrLength","beadMatrix","numberToBead","k","beadToNumber","animateBeadSort","hMult","largest","numInBeads","beads","Array","fill","numbers","n","heapify","animateHeapSort","left","right","elem1","elem2","maxNum","divisor","buckets","map","num","concat","trunc","animateRadixSort","ceil","log10","console","log","className","id","onClick","bubbleSort","selectionSort","insertionSort","quickSort","mergeSort","beadSort","heapSort","radixSort","testAlgorithms","value","idx","key","min","random","jsSortedArr","sort","a","b","rSortedArray","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.873903ee.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            width: window.innerWidth,\n            height: window.innerHeight*0.7,\n            heightMultiplier: 4,\n            arrayHeights: [],\n            startedSort: false,\n            isSorted: false,\n            TIME: 500\n        };\n    }   \n\n    /**\n     * Add event listener\n     */\n    componentDidMount(){\n        this.setArray();\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions.bind(this));    \n    }\n\n    /**\n     * Remove event listener\n     */\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions.bind(this));\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\n\n        if(prevState.array !== this.state.array){\n            this.setState({\n                arrayHeights: this.setHeights()\n            })\n        }\n\n        if(this.state.startedSort ){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.isSorted){\n            \n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = false;\n            });\n\n            this.setState({\n                startedSort: false,\n                isSorted: false\n            });\n\n            this.setArray();\n        }\n    }\n\n    //call this function on window resize\n    updateDimensions(){\n        this.updateBrowserWidth();\n        this.updateBrowserHeight();\n    }\n\n    updateBrowserWidth(){\n        if(Math.abs(this.state.width-window.innerWidth)>12){\n            this.setState({\n                width: window.innerWidth\n            });\n\n            this.setArray();\n        }\n    }\n\n    updateBrowserHeight(){\n        if(this.state.height !== window.innerHeight*0.7){\n            this.setState({\n                height: window.innerHeight*0.7,\n                arrayHeights: this.setHeights()\n            })\n        }\n    }\n\n    getArraySize(){\n        let width = this.state.width;\n\n        //12 = 7px(width) + [2px + 2px](margin) + 1px(border)\n        let arraySize = Math.floor((width - 100)/12);\n\n        return (arraySize<80) ? arraySize : 80;\n    }\n\n    setHeightMultiplier(){\n        let containerHeight = document.getElementsByClassName(\"array-container\")[0].clientHeight;\n\n        this.setState({\n            heightMultiplier: Math.round((containerHeight-10)/108)\n        });\n    }\n\n    setArray(){\n        const array = [];\n\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,100))\n        }\n\n        this.setState({\n            array: array\n        });\n    }\n\n    setHeights(){\n        const height = this.state.height,\n            array = this.state.array,\n            MAX = Math.max(...array),\n            arrayHeights = [];\n\n        for(let i = 0; i<array.length; i++){\n            arrayHeights.push(Math.floor(array[i]*((height-10)/MAX)));\n        }   \n        \n        return arrayHeights;\n        \n    }\n\n\n\n    sortCompleteAnimation(iterations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            size = this.getArraySize(),\n            TIME = this.state.TIME; \n\n        setTimeout(()=>{\n            for(let i=0; i<size; i++){\n                setTimeout(()=>{\n                    array_bar[i].style.backgroundColor = \"green\";\n                }, i*30);\n            }\n        }, (iterations+1)*TIME);\n\n        setTimeout(()=>{\n                [...array_bar].forEach(elem=>{\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 350);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"green\";\n                    }, 700);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 1000);\n                })\n        }, iterations*TIME + size*30 + 200); //200ms for delay\n\n        setTimeout(()=>{\n            this.setState({isSorted: true});\n        }, iterations*TIME + size*30 + 1200 + 500); //1200ms for previous setTimeout to complete + 500ms delay     \n    }\n\n    swap(arr, i, j){\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    /**\n    * START OF SORTING ALGORITHM FUNCTIONS\n    */\n\n\n    //BUBBLE SORT ANIMATION FUNCTION(S)\n    bubbleSort(){\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,    \n            array_bar = document.getElementsByClassName('array-elem'),\n            TIME = this.state.TIME,\n            arrayHeights = this.state.arrayHeights;\n\n        for(let i =0; i<arr.length; i++){\n            setTimeout(()=>{ \n                for(let j=0; j<arr.length-i-1; j++){\n                    setTimeout(()=>{\n                        array_bar[j+1].style.backgroundColor = 'blue';\n                        array_bar[j].style.backgroundColor = 'red';\n                        setTimeout(()=>{\n                            if(arr[j] > arr[j+1]){\n\n                                this.swap(arr, j, j+1);\n                                this.swap(arrayHeights, j, j+1);\n                                \n\n                                array_bar[j].style.height = `${arrayHeights[j]}px`;\n                                array_bar[j+1].style.height = `${[arrayHeights[j+1]]}px`;\n\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                            else{\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                        }, TIME/(arr.length-i-1));\n                    }, j*TIME/(arr.length-i-1));\n                }\n            },i*TIME);  \n        }        \n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF BUBBLE SORT ANIMATION FUNCTION(S)    \n\n\n    //SELECTION SORT ANIMATION FUNCTION(S)\n    selectionSort(){\n\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            heights = this.state.arrayHeights;\n\n        for(let i=0; i<arr.length-1; i++){\n            setTimeout(()=>{\n                let minimum =i;\n                for(let j = i+1, counter=0; j<arr.length; j++, counter++){\n                    setTimeout(()=>{\n                        array_bar[j].style.backgroundColor = 'red';\n                        array_bar[minimum].style.backgroundColor = 'blue';\n                        setTimeout(()=>{\n                            if(arr[j] < arr[minimum]){\n                            array_bar[minimum].style.backgroundColor = 'lightblue';\n                            minimum = j; \n                            }  \n                            else{\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }  \n                        }, TIME/(2*(arr.length-i-1)));\n                    }, counter*TIME/(arr.length-i-1));    \n                }\n\n                setTimeout(()=>{\n\n                    this.swap(arr, i, minimum);\n                    this.swap(heights, i, minimum);\n\n                    array_bar[i].style.height = `${heights[i]}px`;\n                    array_bar[minimum].style.height = `${heights[minimum]}px`;\n                    array_bar[minimum].style.backgroundColor = 'lightblue';\n\n                }, TIME);\n\n                \n\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF SELECTION SORT ANIMATION FUNCTION(S)\n\n\n    //INSERTION SORT ANIMATION FUNCTION(S)\n    insertionSort(){\n\n        //Disable nav buttons [AND TO HANDLE OTHER ACTIONS WHEN NEEDED]\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            heights = this.state.arrayHeights;\n        \n        for(let i=0; i<arr.length; i++){\n            setTimeout(()=>{\n                let pos = i;\n\n                /*\n                returns the pos where the last element\n                of the passed array segment needs to be moved to\n                */\n                let newPos = this.insertionSortHelper(arr.slice(0,i+1), pos); \n\n                if(newPos !== pos)\n                {\n                    //This inserts the value of arr[pos] on index newPos, removing 0 elements\n                    arr.splice(newPos,0,arr[pos]);\n                    heights.splice(newPos,0,heights[pos]);\n\n                    /*\n                    This removes 1 element from the array starting at pos+1 \n                    [+1 because a new element is added in the previous line]\n                    */\n                    arr.splice(pos+1,1);\n                    heights.splice(pos+1,1);\n    \n                    /*\n                    Animate swapping of element at index j with j-1\n                    till it reaches the desired position [newPos]\n                    */\n                    for(let j=pos, counter=0; j>newPos; j--, counter++){\n                        /*\n                        The timestamps can be understood as follows:\n                        At t=0: Initialize Colors\n                        At t=t/2: Swap Values\n                        At t=t: Reset colors to original for next Iteration\n                        */\n                        setTimeout(()=>{\n\n                            //Initialize current and preceding elem to BLUE and RED\n                            array_bar[j-1].style.backgroundColor = 'red';\n                            array_bar[j].style.backgroundColor = 'blue';\n                            array_bar[pos].style.backgroundColor = 'green';\n\n                            //SWAP Values\n                            setTimeout(()=>{\n                                array_bar[j].style.height = `${heights[j]}px`;\n                                array_bar[j-1].style.height = `${heights[newPos]}px`;\n                            }, TIME/(2*(pos-newPos)));\n\n                            /*\n                            SET current last element to lightblue \n                            so it can be reinitialized next iteration\n                            */\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = 'lightblue' ;\n                            \n                                if(j===newPos+1){\n                                    array_bar[newPos].style.backgroundColor = 'lightblue';\n                                }\n                            }, (TIME/(pos-newPos)));\n\n                            setTimeout(()=>{\n                                array_bar[pos].style.backgroundColor = 'lightblue' ;\n                            }, TIME);\n\n                        }, counter*(TIME/(pos-newPos)));    \n                       \n                    }\n                }\n                /*\n                Simple Blink animation to indicate \n                that the element does not move position\n                */\n                else{\n                    \n                    array_bar[i].style.backgroundColor = 'green';\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 150);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'green';\n                    }, 300);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 450);\n                }\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n    }\n\n    //takes in an array and returns the index where the last element should inserted\n    insertionSortHelper(arr, pos){\n        let origPos = pos;\n        while(pos>0 && arr[origPos]<arr[pos-1]){\n            pos--;\n        }\n\n        return pos;\n    }   \n    //END OF INSERTION SORT ANIMATION FUNCTION(S)\n\n\n    // QUICKSORT ANIMATION FUNCTION(S)\n    quickSort(){\n\n        this.setState({startedSort: true});\n\n        const arrCopy = [...this.state.array],  //Create a copy of the original array for manipulations\n            start = 0,\n            end = arrCopy.length - 1,\n            animations = {\n                \"pos\": [],      //store the index of elements that will be swapped\n                \"pivot\": [],    //store the pivots for each run\n                \"counter\": [0]  //count how many swaps take place\n            };\n\n        this.quickSortRecursive(arrCopy, start, end, animations);\n\n        this.animateQSort( animations);\n\n    }\n\n    quickSortRecursive(arr, start, end, animations){\n        if(start >= end){\n            return;\n        }\n\n        let pivotIndex = this.partition(arr, start, end, animations);\n        this.quickSortRecursive(arr, start, pivotIndex-1, animations);\n        this.quickSortRecursive(arr, pivotIndex+1, end, animations);\n    }\n\n    partition(arr, start, end, animations){\n\n        let pivotValue = arr[end],\n            i = start;\n\n        for(let j=start; j<end; j++){\n            if(arr[j] < pivotValue){\n                animations[\"pos\"].push([j,i]);\n                \n                this.swap(arr, j, i);\n                i++\n            }     \n        }\n        \n        animations[\"pos\"].push([i,end]);\n        animations[\"pivot\"].push([i,end]);\n        animations[\"counter\"].push(animations[\"pos\"].length);\n        this.swap(arr, i, end);\n        \n        return i; \n    }\n\n    animateQSort(animations){\n\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            TIME = this.state.TIME,\n            heights = this.state.arrayHeights;\n\n        for(let i=0; i <animations[\"counter\"].length - 1; i++){\n            setTimeout(()=>{\n                for(let j=animations[\"counter\"][i], t=0; j<animations[\"counter\"][i+1]; j++, t++){\n                    setTimeout(()=>{\n                        let idx1 = animations[\"pos\"][j][0],\n                            idx2 = animations[\"pos\"][j][1],\n                            pivot = animations[\"pivot\"][i][1];\n                        \n                        array_bar[idx1].style.backgroundColor = \"red\";\n                        array_bar[idx2].style.backgroundColor = \"blue\";\n\n                        array_bar[pivot].style.backgroundColor = \"green\";\n\n                        this.swap(arr, idx1, idx2);\n                        this.swap(heights, idx1, idx2);\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.height = `${heights[idx1]}px`;\n                            array_bar[idx2].style.height = `${heights[idx2]}px`;\n                        }, TIME/(2*(animations[\"counter\"][i+1]-animations[\"counter\"][i])));\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.backgroundColor = `lightblue`;\n                            array_bar[idx2].style.backgroundColor = `lightblue`;\n                        }, TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                        \n                    }, t*TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                }\n            }, i*TIME);\n        }\n\n    this.sortCompleteAnimation(animations[\"counter\"].length - 1);\n\n    }\n    //END OF QUICKSORT ANIMATION FUNCTION(S)\n\n\n    //MERGESORT ANIMATION FUNCTION(S)\n    mergeSort(){\n\n        this.setState({startedSort: true})\n\n        const arr = [...this.state.array],\n            start = 0,\n            end = arr.length-1,\n            animations = {\n                \"startPos\": [],\n                \"values\": [],\n                \"endPos\": [],\n                \"midPos\": [],\n                \"heightIdx\": []\n            };\n\n        this.mergeSortRecursive(arr,start, end, animations);\n\n        this.animateMSort(animations);\n    }\n\n    mergeSortRecursive(arr, start, end, animations){\n        if(start>=end){\n            return;\n        }\n\n        let mid = Math.floor((start+end)/2);\n\n        this.mergeSortRecursive(arr, start, mid, animations);\n        this.mergeSortRecursive(arr, mid+1, end, animations);\n        this.merge(arr, start, mid, end, animations);\n    }\n\n    merge(arr, start, mid, end, animations) {\n        let arr1Index = start,\n            arr2Index = mid +1,\n            tempArr = [],\n            tempArrIndex = 0;\n\n        for(let i = start; i<=end; i++){\n            if(arr1Index > mid){\n                tempArr[tempArrIndex] = arr[arr2Index];\n                tempArrIndex++;\n                arr2Index++;\n            }\n            else if(arr2Index > end){\n                tempArr[tempArrIndex] = arr[arr1Index];\n                tempArrIndex++;\n                arr1Index++;\n            }\n            else if(arr[arr1Index] < arr[arr2Index]){\n                tempArr[tempArrIndex] = arr[arr1Index];\n                tempArrIndex++;\n                arr1Index++;\n            }\n            else{\n                tempArr[tempArrIndex] = arr[arr2Index];\n                tempArrIndex++;\n                arr2Index++;\n            }\n        }\n\n        animations[\"startPos\"].push(start);\n        animations[\"values\"].push(tempArr);\n        animations[\"midPos\"].push(mid);\n        animations[\"endPos\"].push(end);\n        \n        for(let i = 0; i<tempArrIndex;i++){\n            arr[start] = tempArr[i];\n            start++;\n        }\n    }\n\n    animateMSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            heights = this.state.arrayHeights;\n\n            for(let i= 0; i<animations[\"startPos\"].length; i++){\n            setTimeout(()=>{\n                let start = animations[\"startPos\"][i],\n                    arrLength = animations[\"values\"][i].length;\n                for(let j= start, t=0; j<(start+arrLength); j++, t++){\n                    setTimeout(()=>{\n                        let mid = animations[\"midPos\"][i],\n                            end = animations[\"endPos\"][i];\n\n                        array_bar[start].style.backgroundColor = \"red\";\n                        array_bar[mid].style.backgroundColor = \"green\";\n                        array_bar[end].style.backgroundColor = \"blue\";\n\n                        setTimeout(()=>{\n\n                            arr[j] = animations[\"values\"][i][t]; \n                            array_bar[j].style.height = `${arr[j]*4}px`;\n\n                        }, t*(TIME/(2*arrLength)));\n\n                        setTimeout(()=>{    \n                            array_bar[start].style.backgroundColor = \"lightblue\";\n                            array_bar[mid].style.backgroundColor = \"lightblue\";\n                            array_bar[end].style.backgroundColor = \"lightblue\";\n\n                        }, TIME);\n                    },t*(TIME/arrLength));                   \n                }\n            }, i*(TIME+5));      \n        }\n\n        this.sortCompleteAnimation(animations[\"startPos\"].length - 1);\n    }\n    //END OF MERGESORT ANIMATION FUNCTION(S)\n\n\n    //BEADSORT ANIMATION FUNCTION(S)\n    beadSort(){\n        const arr = this.state.array,\n            animations = [];\n        \n        this.setState({startedSort: true});\n\n        let beadMatrix = this.numberToBead(arr);\n            \n        for(let i = 0; i<beadMatrix.length;i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length; j++){\n                if(beadMatrix[i][j]===false){\n                    beadMatrix[i][j] = true;\n                    counter++;\n                }\n            }\n\n            for(let k=0; k<counter; k++){\n                beadMatrix[i][k] = false;\n            }\n\n            animations.push(this.beadToNumber(beadMatrix));\n        }\n        \n        this.animateBeadSort(animations);\n\n    }\n\n    animateBeadSort(animations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            length = animations.length,\n            counter = animations[0].length,\n            hMult = this.state.heightMultiplier,\n            TIME = this.state.TIME,\n            heights = this.state.arrayHeights;\n\n        for(let i = 0; i<length; i++){\n            setTimeout(()=>{\n                for(let j =0; j<counter; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.height = `${animations[i][j]*hMult}px`;\n                    }, j*TIME*3/(10*counter));\n                }\n            }, i*TIME*3/10);\n        }\n\n       this.sortCompleteAnimation(length*3/10)\n    }\n\n    numberToBead(arr){\n        let largest = Math.max(...arr),\n            numInBeads = [],\n            beadMatrix = [];\n        \n        for(let i=0; i< arr.length; i++){\n\n            let beads = new Array(largest);     //Array.fill() needs an array of a defined length to work\n            beads.fill(true, 0,arr[i]);\n            beads.fill(false, arr[i],largest);\n\n            numInBeads.push(beads);\n        }\n\n        for(let i=0; i<largest;i++){\n            let beads = [];\n            for(let j=0; j<numInBeads.length; j++){\n                beads.push(numInBeads[j][i]);\n            }\n            beadMatrix.push(beads);\n        }\n\n        return beadMatrix;\n    }\n\n    beadToNumber(beadMatrix){\n        let size = beadMatrix[0].length,\n            numbers = [];\n        for(let i=0; i<size; i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length;j++){\n                if(beadMatrix[j][i]===true){\n                    counter++;\n                }\n            }\n            numbers.push(counter);\n        }\n    \n        return numbers;\n    }\n\n    //END OF BEADSORT ANIMATION FUNCTION(S)\n\n    \n    //HEAPSORT ANIMATION FUNCTION(S)\n    heapSort(){\n        \n        this.setState({startedSort: true});\n\n        const arr = [...this.state.array],\n            n = arr.length,\n            animations = [];\n\n        //Create initial max heap\n        for(let i = Math.floor(n/2)-1; i>=0;i--){\n            this.heapify(arr, n, i, animations);\n        }\n\n        //swap root node with last element\n        for(let j = n-1; j>=0; j--){\n            this.swap(arr, j, 0);\n            animations.push([j,0]);\n            this.heapify(arr, j, 0, animations);\n        }\n\n        this.animateHeapSort(animations);\n    }\n\n    heapify(arr, n, i, animations){\n        let largest = i,\n            left = 2*i+1,\n            right = 2*i+2;\n        \n        if(left<n && arr[left]>arr[largest]){\n            largest = left;\n        }\n\n        if(right<n && arr[right]>arr[largest]){\n            largest = right;\n        }\n\n        if(largest !== i){\n            this.swap(arr, i, largest);\n            animations.push([i,largest]);\n            this.heapify(arr, n, largest, animations);\n        }\n\n    }\n\n    animateHeapSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME,\n            hMult = this.state.heightMultiplier;\n        \n        for(let i=0; i< animations.length; i++){\n            setTimeout(()=>{\n                let elem1 = animations[i][0],\n                elem2 = animations[i][1];\n\n                array_bar[elem1].style.backgroundColor = `red`;\n                array_bar[elem2].style.backgroundColor = `blue`;\n\n                setTimeout(()=>{\n                    this.swap(arr, elem1, elem2);\n                    array_bar[elem1].style.height = `${hMult*arr[elem1]}px`;\n                    array_bar[elem2].style.height = `${hMult*arr[elem2]}px`;\n                }, TIME/20);\n                \n                setTimeout(()=>{\n                    array_bar[elem1].style.backgroundColor = `lightblue`;\n                    array_bar[elem2].style.backgroundColor = `lightblue`;\n                }, TIME/10 - 10);\n            }, i*TIME/10);\n        }\n    \n        this.sortCompleteAnimation(animations.length/10);\n    }\n    //END OF HEAPSORT ANIMATION FUNCTION(S)\n\n\n    //RADIX SORT ANIMATION FUNCTION(S)\n    radixSort(){\n\n        let arr = [...this.state.array],\n            maxNum = Math.max(...arr),\n            divisor = 1,\n            animations = [];//{\n            //     \"arrays\": [],\n            //     \"numOfEach\": []\n            // };\n            // let t = [];\n        while (Math.trunc(maxNum)>0){\n            let buckets = [...Array(10)].map(() => []);\n            arr.forEach(num=>{\n                buckets[Math.floor((num/divisor))%10].push(num);\n            });\n            \n            // buckets.forEach(elem=>{\n            //     t.push(elem.length);\n            // });\n            // console.log(buckets);\n            // console.log(t);\n            // Reconstruct the array by concatinating all sub arrays\n            animations.push([].concat(...buckets));\n            arr = [].concat(...buckets);\n\n            maxNum/=10;\n            divisor *= 10;\n            \n        }\n\n        this.animateRadixSort(animations);\n    }\n\n    animateRadixSort(animations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            hMult = this.state.heightMultiplier,\n            TIME = this.state.TIME;\n\n        let arr = this.state.array,\n            max = Math.max(...arr),\n            counter = Math.ceil(Math.log10(max+1));\n\n        for(let i=0; i<counter; i++){\n            setTimeout(()=>{\n                for(let j=0;j<arr.length;j++){\n                    setTimeout(()=>{\n                        arr[j] = animations[i][j];\n                        array_bar[j].style.height  = `${arr[j]*hMult}px`;\n                    }, j*(TIME*14/arr.length));\n                }\n            },i*TIME*14);\n        }\n\n        this.sortCompleteAnimation(counter*14);\n    }\n        \n        \n    //END OF RADIXSORT ANIMATION FUNCTION(S)\n\n\n    /**\n    * END OF SORTING ALGORITHM FUNCTIONS\n    */\n    \n    \n    render(){\n        const {arrayHeights} = this.state;\n        console.log(arrayHeights);\n        return( \n            <>  \n                <nav className = \"navbar\">\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.setArray()}}>Generate New Array</button>\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\n                    <button className=\"nav-btn\" id = \"quick-sort\" onClick = {()=>{this.quickSort()}}>Quick Sort</button>\n                    <button className=\"nav-btn\" id = \"merge-sort\" onClick = {()=>{this.mergeSort()}}>Merge Sort</button>\n                    <button className=\"nav-btn\" id = \"bead-sort\" onClick = {()=>{this.beadSort()}}>Bead Sort</button>\n                    <button className=\"nav-btn\" id = \"heap-sort\" onClick = {()=>{this.heapSort()}}>Heap Sort</button>\n                    <button className=\"nav-btn\" id = \"radix-sort\" onClick = {()=>{this.radixSort()}}>Radix Sort</button>\n                    <button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>\n                </nav>\n                <div className=\"array-container\">\n                    <div className=\"array-bars\">\n                    {\n                        arrayHeights.map((value, idx) => (\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value}px`}}></div>\n                        ))\n                    } \n                    </div>\n                </div>\n            </>\n        );\n    }\n  \n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    testAlgorithms(){\n        for(let i= 0; i<100; i++){\n            const arr = [];\n            for(let j=0; j< this.getRandomInt(1,100); j++){\n                arr.push(this.getRandomInt(0,1000));\n            }\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\n                //bSortedArray = bubbleSortAlg(arr),\n                //sSortedArray = this.selectionSort(arr),\n                //iSortedArray = this.insertionSort(arr),\n                //qSortedArray = this.quickSortAlg(arr, 0, arr.length - 1),\n                //mSortedArray = this.mergeSort(arr),\n                //bdSortedArray =  this.beadSort(arr),\n                //hSortedArray = this.heapSort(arr),\n                rSortedArray = this.radixSort(arr);\n\n\n\n            console.log(this.arraysAreEqual(jsSortedArr, rSortedArray));\n        }\n    }\n\n    arraysAreEqual(arr1, arr2){\n        if(arr1.length !== arr2.length){\n            return false;\n        }\n\n        for(let i =0; i<arr1.length; i++){\n            if(arr1[i] !== arr2[i]){\n                console.log(arr1[i], arr2[i]);\n                return false\n            }\n        }\n\n        return true;\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}