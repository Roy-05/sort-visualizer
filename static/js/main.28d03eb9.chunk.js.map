{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","width","window","innerWidth","startedSort","isSorted","TIME","this","updateDimensions","addEventListener","bind","removeEventListener","prevProps","prevState","nav_btn","document","getElementsByClassName","forEach","btn","disabled","setState","setArray","arraySize","Math","floor","i","getArraySize","push","getRandomInt","iterations","array_bar","size","setTimeout","style","backgroundColor","elem","arr","j","temp","swap","height","length","sortCompleteAnimation","minimum","pos","newPos","insertionSortHelper","slice","splice","counter","origPos","arrCopy","end","animations","quickSortRecursive","animateQSort","start","pivotIndex","partition","pivotValue","t","idx1","idx2","pivot","mergeSortRecursive","animateMSort","mid","merge","arr1Index","arr2Index","tempArr","tempArrIndex","comparisonsArr","arrLength","beadMatrix","numberToBead","k","beadToNumber","animateBeadSort","largest","max","numInBeads","beads","Array","fill","numbers","className","id","onClick","bubbleSort","selectionSort","insertionSort","quickSort","mergeSort","beadSort","map","value","idx","key","min","random","jsSortedArr","sort","a","b","bdSortedArray","console","log","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28d03eb9.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            width: window.innerWidth,\n            startedSort: false,\n            isSorted: false,\n            TIME: 500\n        };\n    }   \n\n    /**\n     * Add event listener\n     */\n    componentDidMount(){\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions.bind(this));  \n    }\n\n    /**\n     * Remove event listener\n     */\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions.bind(this));\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\n    \n        if(this.state.startedSort ){\n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = true;\n            });\n        }\n\n        if(this.state.isSorted){\n            \n            [...nav_btn].forEach((btn)=>{\n                btn.disabled = false;\n            });\n\n            this.setState({\n                startedSort: false,\n                isSorted: false\n            });\n\n            this.setArray();\n        }\n    }\n\n    //call this function on window resize to change window width\n    updateDimensions(){\n        this.setState({width: window.innerWidth});\n        this.setArray();\n    }\n\n    getArraySize(){\n        let width = this.state.width;\n\n        //12 = 7px(width) + [2px + 2px](margin) + 1px(border)\n        let arraySize = Math.floor((width - 100)/12);\n\n        if(arraySize>=75){\n            return 75;\n        }\n\n        return arraySize;\n    }\n\n    setArray(){\n        const array = [];\n        for(let i = 0; i<this.getArraySize(); i++){\n            array.push(this.getRandomInt(1,100))\n        }\n\n        this.setState({array});\n    }\n\n    sortCompleteAnimation(iterations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            size = this.getArraySize(),\n            TIME = this.state.TIME; \n\n        setTimeout(()=>{\n            for(let i=0; i<size; i++){\n                setTimeout(()=>{\n                    array_bar[i].style.backgroundColor = \"green\";\n                }, i*30);\n            }\n        }, (iterations+1)*TIME);\n\n        setTimeout(()=>{\n                [...array_bar].forEach(elem=>{\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 350);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"green\";\n                    }, 700);\n\n                    setTimeout(()=>{\n                        elem.style.backgroundColor = \"lightblue\";\n                    }, 1000);\n                })\n        }, iterations*TIME + size*30 + 200); //200ms for delay\n\n        setTimeout(()=>{\n            this.setState({isSorted: true});\n        }, iterations*TIME + size*30 + 1200 + 500); //1200ms for previous setTimeout to complete + 500ms delay     \n    }\n\n    swap(arr, i, j){\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    /**\n    * START OF SORTING ALGORITHM FUNCTIONS\n    */\n\n\n    //BUBBLE SORT ANIMATION FUNCTION(S)\n    bubbleSort(){\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,    \n            array_bar = document.getElementsByClassName('array-elem'),\n            TIME = this.state.TIME;\n\n        for(let i =0; i<arr.length; i++){\n            setTimeout(()=>{ \n                for(let j=0; j<arr.length-i-1; j++){\n                    setTimeout(()=>{\n                        array_bar[j+1].style.backgroundColor = 'blue';\n                        array_bar[j].style.backgroundColor = 'red';\n                        setTimeout(()=>{\n                            if(arr[j] > arr[j+1]){\n\n                                this.swap(arr, j, j+1);\n\n                                array_bar[j].style.height = `${arr[j]}px`;\n                                array_bar[j+1].style.height = `${arr[j+1]}px`;\n\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                            else{\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }\n                        }, TIME/(arr.length-i-1));\n                    }, j*TIME/(arr.length-i-1));\n                }\n            },i*TIME);  \n        }        \n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF BUBBLE SORT ANIMATION FUNCTION(S)    \n\n\n    //SELECTION SORT ANIMATION FUNCTION(S)\n    selectionSort(){\n\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME;\n\n        for(let i=0; i<arr.length-1; i++){\n            setTimeout(()=>{\n                let minimum =i;\n                for(let j = i+1; j<arr.length; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.backgroundColor = 'red';\n                        array_bar[minimum].style.backgroundColor = 'blue';\n                        setTimeout(()=>{\n                            if(arr[j] < arr[minimum]){\n                            array_bar[minimum].style.backgroundColor = 'lightblue';\n                            minimum = j; \n                            }  \n                            else{\n                                array_bar[j].style.backgroundColor = 'lightblue';\n                            }  \n                        }, 4);\n                    }, j*4);    \n                }\n                setTimeout(()=>{\n\n                    this.swap(arr, i, minimum)\n\n                    array_bar[i].style.height = `${arr[i]}px`;\n                    array_bar[minimum].style.height = `${arr[minimum]}px`;\n                    array_bar[minimum].style.backgroundColor = 'lightblue';\n\n                }, TIME);\n\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n\n    }\n    //END OF SELECTION SORT ANIMATION FUNCTION(S)\n\n\n    //INSERTION SORT ANIMATION FUNCTION(S)\n    insertionSort(){\n\n        //Disable nav buttons [AND TO HANDLE OTHER ACTIONS WHEN NEEDED]\n        this.setState({startedSort: true});\n\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME;\n        \n        for(let i=0; i<arr.length; i++){\n            setTimeout(()=>{\n                let pos = i;\n\n                /*\n                returns the pos where the last element\n                of the passed array segment needs to be moved to\n                */\n                let newPos = this.insertionSortHelper(arr.slice(0,i+1), pos); \n\n                if(newPos !== pos)\n                {\n                    //This inserts the value of arr[pos] on index newPos, removing 0 elements\n                    arr.splice(newPos,0,arr[pos]);\n\n                    /*\n                    This removes 1 element from the array starting at pos+1 \n                    [+1 because a new element is added in the previous line]\n                    */\n                    arr.splice(pos+1,1);\n                    \n                    /*\n                    Animate swapping of element at index j with j-1\n                    till it reaches the desired position [newPos]\n                    */\n                    for(let j=pos, counter=0; j>newPos; j--, counter++){\n                        /*\n                        The timestamps can be understood as follows:\n                        At t=0: Initialize Colors\n                        At t=t/2: Swap Values\n                        At t=t: Reset colors to original for next Iteration\n                        */\n                        setTimeout(()=>{\n\n                            //Initialize current and preceding elem to BLUE and RED\n                            array_bar[j-1].style.backgroundColor = 'red';\n                            array_bar[j].style.backgroundColor = 'blue';\n\n                            //SWAP Values\n                            setTimeout(()=>{\n                                array_bar[j].style.height = `${arr[j]}px`;\n                                array_bar[j-1].style.height = `${arr[newPos]}px`;\n                            }, TIME/(2*(pos-newPos)));\n\n                            /*\n                            SET current last element to lightblue \n                            so it can be reinitialized next iteration\n                            */\n                            setTimeout(()=>{\n                                array_bar[j].style.backgroundColor = 'lightblue' ;\n                                \n                                if(j===newPos+1){\n                                    array_bar[newPos].style.backgroundColor = 'lightblue';\n                                }\n                            }, (TIME/(pos-newPos)));\n\n                        \n                        }, counter*(TIME/(pos-newPos)));    \n                    }\n                }\n                /*\n                Simple Blink animation to indicate \n                that the element does not move position\n                */\n                else{\n                    array_bar[i].style.backgroundColor = 'red';\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 150);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'red';\n                    }, 300);\n                    setTimeout(()=>{\n                        array_bar[i].style.backgroundColor = 'lightblue';\n                    }, 450);\n                }\n            }, i*TIME);\n        }\n\n        this.sortCompleteAnimation(arr.length);\n    }\n\n    //takes in an array and returns the index where the last element should inserted\n    insertionSortHelper(arr, pos){\n        let origPos = pos;\n        while(pos>0 && arr[origPos]<arr[pos-1]){\n            pos--;\n        }\n\n        return pos;\n    }   \n    //END OF INSERTION SORT ANIMATION FUNCTION(S)\n\n\n    // QUICKSORT ANIMATION FUNCTION(S)\n    quickSort(){\n\n        this.setState({startedSort: true});\n\n        const arrCopy = [...this.state.array],  //Create a copy of the original array for manipulations\n            start = 0,\n            end = arrCopy.length - 1,\n            animations = {\n                \"pos\": [],      //store the index of elements that will be swapped\n                \"pivot\": [],    //store the pivots for each run\n                \"counter\": [0]  //count how many swaps take place\n            };\n\n        this.quickSortRecursive(arrCopy, start, end, animations);\n\n        this.animateQSort( animations);\n\n    }\n\n    quickSortRecursive(arr, start, end, animations){\n        if(start >= end){\n            return;\n        }\n\n        let pivotIndex = this.partition(arr, start, end, animations);\n        this.quickSortRecursive(arr, start, pivotIndex-1, animations);\n        this.quickSortRecursive(arr, pivotIndex+1, end, animations);\n    }\n\n    partition(arr, start, end, animations){\n\n        let pivotValue = arr[end],\n            i = start;\n\n        for(let j=start; j<end; j++){\n            if(arr[j] < pivotValue){\n                animations[\"pos\"].push([j,i]);\n                \n                this.swap(arr, j, i);\n                i++\n            }     \n        }\n        \n        animations[\"pos\"].push([i,end]);\n        animations[\"pivot\"].push([i,end]);\n        animations[\"counter\"].push(animations[\"pos\"].length);\n        this.swap(arr, i, end);\n        \n        return i; \n    }\n\n    animateQSort(animations){\n\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            TIME = this.state.TIME;\n\n        for(let i=0; i <animations[\"counter\"].length - 1; i++){\n            setTimeout(()=>{\n                for(let j=animations[\"counter\"][i], t=0; j<animations[\"counter\"][i+1]; j++, t++){\n                    setTimeout(()=>{\n                        let idx1 = animations[\"pos\"][j][0],\n                            idx2 = animations[\"pos\"][j][1],\n                            pivot = animations[\"pivot\"][i][1];\n                        \n                        array_bar[idx1].style.backgroundColor = \"red\";\n                        array_bar[idx2].style.backgroundColor = \"blue\";\n\n                        array_bar[pivot].style.backgroundColor = \"green\";\n\n                        this.swap(arr, idx1, idx2);\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.height = `${arr[idx1]}px`;\n                            array_bar[idx2].style.height = `${arr[idx2]}px`;\n                        }, TIME/(2*(animations[\"counter\"][i+1]-animations[\"counter\"][i])));\n\n                        setTimeout(()=>{\n                            array_bar[idx1].style.backgroundColor = `lightblue`;\n                            array_bar[idx2].style.backgroundColor = `lightblue`;\n                        }, TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                        \n                    }, t*TIME/(animations[\"counter\"][i+1]-animations[\"counter\"][i]));\n                }\n            }, i*TIME);\n        }\n\n    this.sortCompleteAnimation(animations[\"counter\"].length - 1);\n\n    }\n    //END OF QUICKSORT ANIMATION FUNCTION(S)\n\n\n    //MERGESORT ANIMATION FUNCTION(S)\n    mergeSort(){\n\n        this.setState({startedSort: true});\n\n        const arr = [...this.state.array],\n            start = 0,\n            end = arr.length-1,\n            animations = {\n                \"startPos\": [],\n                \"values\": [],\n                \"endPos\": [],\n                \"midPos\": [],\n                \"comparisons\": []\n            };\n\n        this.mergeSortRecursive(arr,start, end, animations);\n\n        this.animateMSort(animations);\n    }\n\n    mergeSortRecursive(arr, start, end, animations){\n        if(start>=end){\n            return;\n        }\n\n        let mid = Math.floor((start+end)/2);\n\n        this.mergeSortRecursive(arr, start, mid, animations);\n        this.mergeSortRecursive(arr, mid+1, end, animations);\n        this.merge(arr, start, mid, end, animations);\n    }\n\n    merge(arr, start, mid, end, animations) {\n        let arr1Index = start,\n            arr2Index = mid +1,\n            tempArr = [],\n            tempArrIndex = 0,\n            comparisonsArr = [];\n\n        for(let i = start; i<=end; i++){\n            if(arr1Index > mid){\n                comparisonsArr.push([arr1Index, mid]);\n                tempArr[tempArrIndex] = arr[arr2Index];\n                tempArrIndex++;\n                arr2Index++;\n            }\n            else if(arr2Index > end){\n                comparisonsArr.push([arr2Index, end]);\n                tempArr[tempArrIndex] = arr[arr1Index];\n                tempArrIndex++;\n                arr1Index++;\n            }\n            else if(arr[arr1Index] < arr[arr2Index]){\n                comparisonsArr.push([arr1Index, arr2Index]);\n                tempArr[tempArrIndex] = arr[arr1Index];\n                tempArrIndex++;\n                arr1Index++;\n            }\n            else{\n                comparisonsArr.push([arr2Index, arr1Index]);\n                tempArr[tempArrIndex] = arr[arr2Index];\n                tempArrIndex++;\n                arr2Index++;\n            }\n        }\n\n        animations[\"startPos\"].push(start);\n        animations[\"values\"].push(tempArr);\n        animations[\"midPos\"].push(mid);\n        animations[\"endPos\"].push(end);\n        animations[\"comparisons\"].push(comparisonsArr);\n        for(let i = 0; i<tempArrIndex;i++){\n            arr[start] = tempArr[i];\n            start++;\n        }\n    }\n\n    animateMSort(animations){\n        const arr = this.state.array,\n            array_bar = document.getElementsByClassName(\"array-elem\"),\n            TIME = this.state.TIME;\n\n            for(let i= 0; i<animations[\"startPos\"].length; i++){\n            setTimeout(()=>{\n                let start = animations[\"startPos\"][i],\n                    arrLength = animations[\"values\"][i].length;\n                for(let j= start, t=0; j<(start+arrLength); j++, t++){\n                    setTimeout(()=>{\n                        let mid = animations[\"midPos\"][i],\n                            end = animations[\"endPos\"][i];\n                            // compare1 = animations[\"comparisons\"][i][t][0],\n                            // compare2 = animations[\"comparisons\"][i][t][1];\n                        \n                        array_bar[start].style.backgroundColor = \"red\";\n                        array_bar[mid].style.backgroundColor = \"green\";\n                        array_bar[end].style.backgroundColor = \"blue\";\n\n                        // array_bar[compare1].style.backgroundColor = \"red\";\n                        // array_bar[compare2].style.backgroundColor = \"red\";\n\n\n                        setTimeout(()=>{\n                            arr[j] = animations[\"values\"][i][t]; \n                            array_bar[j].style.height = `${arr[j]}px`;\n                        }, t*(TIME/(2*arrLength)));\n\n                        setTimeout(()=>{    \n                            array_bar[start].style.backgroundColor = \"lightblue\";\n                            array_bar[mid].style.backgroundColor = \"lightblue\";\n                            array_bar[end].style.backgroundColor = \"lightblue\";\n\n                            // array_bar[compare1].style.backgroundColor = \"lightblue\";\n                            // array_bar[compare1].style.backgroundColor = \"lightblue\";\n\n                        }, TIME);\n                    },t*(TIME/arrLength));                   \n                }\n            }, i*(TIME+5));      \n        }\n\n        this.sortCompleteAnimation(animations[\"startPos\"].length - 1);\n    }\n    //END OF MERGESORT ANIMATION FUNCTION(S)\n\n\n    //BEADSORT ANIMATION FUNCTION(S)\n    beadSort(){\n        const arr = this.state.array,\n            animations = [];\n\n        let beadMatrix = this.numberToBead(arr);\n            \n        for(let i = 0; i<beadMatrix.length;i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length; j++){\n                if(beadMatrix[i][j]===false){\n                    beadMatrix[i][j] = true;\n                    counter++;\n                }\n            }\n\n            for(let k=0; k<counter; k++){\n                beadMatrix[i][k] = false;\n            }\n\n            animations.push(this.beadToNumber(beadMatrix));\n        }\n        \n        this.animateBeadSort(animations);\n\n    }\n\n    animateBeadSort(animations){\n        const array_bar = document.getElementsByClassName(\"array-elem\"),\n            arr = this.state.array,\n            length = animations.length,\n            counter = animations[0].length;\n\n        // for(let i =0; i<arr.length; i++){\n        //     array_bar[i].style.height = `${arr[i]}px`;\n        // }\n\n        for(let i = 0; i<length; i++){\n            setTimeout(()=>{\n                for(let j =0; j<counter; j++){\n                    setTimeout(()=>{\n                        array_bar[j].style.height = `${animations[i][j]}px`;\n                    }, j*15);\n                }\n            }, i*150);\n        }\n    }\n\n    numberToBead(arr){\n        let largest = Math.max(...arr),\n            numInBeads = [],\n            beadMatrix = [];\n        \n        for(let i=0; i< arr.length; i++){\n\n            let beads = new Array(largest);     //Array.fill() needs an array of a defined length to work\n            beads.fill(true, 0,arr[i]);\n            beads.fill(false, arr[i],largest);\n\n            numInBeads.push(beads);\n        }\n\n        for(let i=0; i<largest;i++){\n            let beads = [];\n            for(let j=0; j<numInBeads.length; j++){\n                beads.push(numInBeads[j][i]);\n            }\n            beadMatrix.push(beads);\n        }\n\n        return beadMatrix;\n    }\n\n    beadToNumber(beadMatrix){\n        let size = beadMatrix[0].length,\n            numbers = [];\n        for(let i=0; i<size; i++){\n            let counter = 0;\n            for(let j=0; j<beadMatrix.length;j++){\n                if(beadMatrix[j][i]===true){\n                    counter++;\n                }\n            }\n            numbers.push(counter);\n        }\n    \n        return numbers;\n    }\n\n    //END OF BEADSORT ANIMATION FUNCTION(S)\n\n    \n    /**\n    * END OF SORTING ALGORITHM FUNCTIONS\n    */\n    \n    \n    render(){\n        const {array} = this.state;\n        \n        return( \n            <>  \n                <nav className = \"navbar\">\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.setArray()}}>Generate New Array</button>\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\n                    <button className=\"nav-btn\" id = \"quick-sort\" onClick = {()=>{this.quickSort()}}>Quick Sort</button>\n                    <button className=\"nav-btn\" id = \"merge-sort\" onClick = {()=>{this.mergeSort()}}>Merge Sort</button>\n                    <button className=\"nav-btn\" id = \"bead-sort\" onClick = {()=>{this.beadSort()}}>Bead Sort</button>\n                    {/*<button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>*/}\n                </nav>\n                <div className=\"array-container\">\n                    {\n                        array.map((value, idx) => (\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value}px`}}></div>\n                        ))\n                    } \n                </div>\n            </>\n        );\n    }\n  \n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    testAlgorithms(){\n        for(let i= 0; i<100; i++){\n            const arr = [];\n            for(let j=0; j< this.getRandomInt(1,20); j++){\n                arr.push(this.getRandomInt(0,1000));\n            }\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\n                //bSortedArray = bubbleSortAlg(arr),\n                //sSortedArray = this.selectionSort(arr),\n                //iSortedArray = this.insertionSort(arr),\n                //qSortedArray = this.quickSortAlg(arr, 0, arr.length - 1),\n                // mSortedArray = this.mergeSort(arr),\n                bdSortedArray =  this.beadSort(arr);\n\n\n\n            console.log(this.arraysAreEqual(jsSortedArr, bdSortedArray));\n        }\n    }\n\n    arraysAreEqual(arr1, arr2){\n        if(arr1.length !== arr2.length){\n            return false;\n        }\n\n        for(let i =0; i<arr1.length; i++){\n            if(arr1[i] !== arr2[i]){\n                console.log(arr1[i], arr2[i]);\n                return false\n            }\n        }\n\n        return true;\n    }\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}