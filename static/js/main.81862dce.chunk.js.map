{"version":3,"sources":["SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","startedBubbleSort","startedSelectionSort","sorted","this","setArray","prevProps","prevState","nav_btn","document","getElementsByClassName","forEach","btn","disabled","setState","resetArray","window","screen","width","i","getArraySize","push","getRandomInt","array_bar","setTimeout","style","backgroundColor","length","arr","j","temp","arr1_height","arr2_height","height","minimum","pos","className","id","onClick","bubbleSort","selectionSort","insertionSort","testAlgorithms","map","value","idx","key","min","max","Math","floor","random","jsSortedArr","slice","sort","a","b","iSortedArray","console","log","arraysAreEqual","arr1","arr2","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81862dce.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SortingVisualizer.css';\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            startedBubbleSort: false,\r\n            startedSelectionSort: false,\r\n            sorted: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setArray();    \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        let nav_btn = document.getElementsByClassName(\"nav-btn\");\r\n    \r\n        if(this.state.startedBubbleSort ){\r\n            [...nav_btn].forEach((btn)=>{\r\n                btn.disabled = true;\r\n            });\r\n        }\r\n\r\n        if(this.state.startedSelectionSort){\r\n            [...nav_btn].forEach((btn)=>{\r\n                btn.disabled = true;\r\n            });\r\n        }\r\n\r\n        if(this.state.sorted){\r\n            [...nav_btn].forEach((btn)=>{\r\n                btn.disabled = false;\r\n            });\r\n\r\n            this.setState({\r\n                startedBubbleSort: false,\r\n                startedSelectionSort: false,\r\n                sorted: false\r\n            });\r\n\r\n            this.resetArray();\r\n        }\r\n    }\r\n\r\n    getArraySize(){\r\n        let deviceWidth = window.screen.width,\r\n            arraySize;\r\n        if(deviceWidth < 400){\r\n            arraySize = 50;\r\n        }\r\n        else{\r\n            arraySize = 75;\r\n        }\r\n\r\n        return arraySize;\r\n    }\r\n\r\n    setArray(){\r\n        const array = [];\r\n        for(let i = 0; i<this.getArraySize(); i++){\r\n            array.push(this.getRandomInt(1,500))\r\n        }\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i = 0; i<this.getArraySize(); i++){\r\n            array.push(this.getRandomInt(1,500))\r\n        }\r\n\r\n        this.setState({array});\r\n\r\n        const array_bar = document.getElementsByClassName('array-elem');\r\n        for(let i=0;i<array.length;i++){\r\n            setTimeout(()=>{\r\n                array_bar[i].style.backgroundColor = \"lightblue\";\r\n            }, i*30);\r\n        }\r\n             \r\n    }\r\n\r\n    bubbleSort(){\r\n        const arr = this.state.array,    \r\n            array_bar = document.getElementsByClassName('array-elem');\r\n\r\n        this.setState({startedBubbleSort: true});\r\n\r\n        for(let i =0; i<arr.length-1; i++){\r\n            setTimeout(()=>{ \r\n                if(i===0){\r\n                    setTimeout(()=>{array_bar[arr.length-i-1].style.backgroundColor = 'green';},400)\r\n                }\r\n                else{\r\n                    array_bar[arr.length-i].style.backgroundColor = 'green';\r\n                }\r\n                for(let j=0; j<arr.length-i-1; j++){\r\n                    setTimeout(()=>{\r\n                        array_bar[j+1].style.backgroundColor = 'red';\r\n                        array_bar[j].style.backgroundColor = 'red';\r\n                        setTimeout(()=>{\r\n                            if(arr[j] > arr[j+1]){\r\n                            \r\n                                let temp = arr[j],\r\n                                    arr1_height = arr[j],\r\n                                    arr2_height = arr[j+1];\r\n                                arr[j] = arr[j+1];\r\n                                arr[j+1] = temp;\r\n                                array_bar[j].style.height = `${arr2_height}px`;\r\n                                array_bar[j+1].style.height = `${arr1_height}px`;\r\n                                array_bar[j+1].style.backgroundColor = 'green';\r\n                                array_bar[j].style.backgroundColor = 'lightblue';\r\n                            }\r\n                            else{\r\n                                array_bar[j+1].style.backgroundColor = 'lightblue';\r\n                                array_bar[j].style.backgroundColor = 'lightblue';\r\n                            }\r\n                        }, 4);\r\n\r\n                        if(i===arr.length-2){\r\n                            setTimeout(()=>{\r\n                                array_bar[j+1].style.backgroundColor = 'green';                                    \r\n                            }, 400);\r\n\r\n                            setTimeout(()=>{\r\n                                array_bar[j].style.backgroundColor = 'green';                                    \r\n                            }, 800);\r\n                        }\r\n                    }, j*4);\r\n                }\r\n            },i*400);  \r\n        }        \r\n\r\n        setTimeout(()=>{\r\n            this.setState({sorted: true})\r\n        }, arr.length*400+1750);\r\n\r\n    }    \r\n\r\n    selectionSort(){\r\n        const arr = this.state.array,\r\n            array_bar = document.getElementsByClassName(\"array-elem\");\r\n        \r\n        this.setState({startedSelectionSort: true});\r\n\r\n        for(let i=0; i<arr.length-1; i++){\r\n            let minimum = i; //Declare minimum here\r\n            setTimeout(()=>{\r\n                for(let j = i+1; j<arr.length; j++){\r\n                    setTimeout(()=>{\r\n                        //Getting a warning for these references:\r\n                        array_bar[j].style.backgroundColor = 'red';\r\n                        array_bar[minimum].style.backgroundColor = 'blue';\r\n                        setTimeout(()=>{\r\n                            if(arr[j] < arr[minimum]){\r\n                            array_bar[minimum].style.backgroundColor = 'lightblue';\r\n                            minimum = j; \r\n                            }  \r\n                            else{\r\n                                array_bar[j].style.backgroundColor = 'lightblue';\r\n                            }  \r\n                        }, 4);\r\n                    }, (j-1)*4);    \r\n                }\r\n                setTimeout(()=>{\r\n                    let temp = arr[i],\r\n                    arr1_height = arr[minimum],\r\n                    arr2_height = arr[i];\r\n\r\n                    arr[i] = arr[minimum];\r\n                    arr[minimum] = temp;\r\n\r\n                    array_bar[i].style.height = `${arr1_height}px`;\r\n                    array_bar[minimum].style.height = `${arr2_height}px`;\r\n    \r\n                    array_bar[i].style.backgroundColor = \"green\";\r\n                    if(i !== minimum){\r\n                        array_bar[minimum].style.backgroundColor = 'lightblue';\r\n                    }\r\n                }, 400);\r\n                \r\n\r\n                if(i === arr.length-2){\r\n                    setTimeout(()=>{\r\n                        array_bar[i+1].style.backgroundColor = \"green\";\r\n                    },800);\r\n                }\r\n\r\n            }, i*400);\r\n        }\r\n\r\n        setTimeout(()=>{\r\n            this.setState({sorted: true})\r\n        }, arr.length*400+1750);\r\n\r\n    }\r\n\r\n    insertionSort(){\r\n\r\n        const arr = this.state.array,\r\n            array_bar = document.getElementsByClassName(\"array-elem\");\r\n        \r\n        for(let i = 0; i < arr.length ; i++){\r\n            setTimeout(()=>{\r\n                let temp = arr[i],\r\n                pos = i,\r\n                isFirstEntry = true;\r\n\r\n                array_bar[i].style.backgroundColor = 'red';\r\n                for(;pos>0;pos--){\r\n                    if(temp<arr[pos-1]){\r\n                        arr[pos] = arr[pos-1];\r\n                        array_bar[pos].style.height = `${arr[pos]}px`;\r\n                        /*if(isFirstEntry){\r\n                            array_bar[pos-1].style.backgroundColor = 'yellow';\r\n                            isFirstEntry = false;\r\n                        }\r\n                        else{ \r\n                            array_bar[pos+1].style.backgroundColor = 'lightblue';\r\n                            array_bar[pos].style.backgroundColor = 'yellow';\r\n                        }*/\r\n                    }\r\n                    else{\r\n                        //array_bar[pos].style.backgroundColor = 'yellow';\r\n                        //isFirstEntry = true;\r\n                        break;\r\n                    }\r\n                }\r\n                    \r\n                arr[pos] = temp;\r\n                array_bar[pos].style.height = `${arr[pos]}px`;\r\n                array_bar[pos].style.backgroundColor = 'green';\r\n\r\n                setTimeout(()=>{array_bar[i].style.backgroundColor = 'lightblue';}, 500);\r\n                \r\n            }, i*500);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        \r\n        return( \r\n            <>  \r\n                <nav className = \"navbar\">\r\n                    <button className=\"nav-btn\" id = \"gen-new-arr\" onClick = {()=>{this.resetArray()}}>Generate New Array</button>\r\n                    <button className=\"nav-btn\" id = \"bubble-sort\" onClick = {()=>{this.bubbleSort()}}>Bubble Sort</button>\r\n                    <button className=\"nav-btn\" id = \"selection-sort\" onClick = {()=>{this.selectionSort()}}>Selection Sort</button>\r\n                    <button className=\"nav-btn\" id = \"insertion-sort\" onClick = {()=>{this.insertionSort()}}>Insertion Sort</button>\r\n                    <button className=\"nav-btn\" id = \"test-algs\" onClick = {()=>{this.testAlgorithms()}}>Test!</button>\r\n                </nav>\r\n                <div className=\"array-container\">\r\n                    {\r\n                        array.map((value, idx) => (\r\n                            <div className = \"array-elem\" key = {idx} style = {{height: `${value}px`}}></div>\r\n                        ))\r\n                    } \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n  \r\n    //Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    testAlgorithms(){\r\n        for(let i= 0; i<100; i++){\r\n            const arr = [];\r\n            for(let j=0; j< this.getRandomInt(1,1000); j++){\r\n                arr.push(this.getRandomInt(-1000,1000));\r\n            }\r\n            let jsSortedArr = arr.slice().sort((a,b)=>a-b),\r\n                //bSortedArray = bubbleSortAlg(arr),\r\n                //sSortedArray = this.selectionSort(arr),\r\n                iSortedArray = this.insertionSort(arr);\r\n\r\n\r\n            console.log(this.arraysAreEqual(jsSortedArr, iSortedArray));\r\n        }\r\n    }\r\n\r\n    arraysAreEqual(arr1, arr2){\r\n        if(arr1.length !== arr2.length){\r\n            return false;\r\n        }\r\n\r\n        for(let i =0; i<arr1.length; i++){\r\n            if(arr1[i] !== arr2[i]){\r\n                console.log(arr1[i], arr2[i]);\r\n                return false\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n//import Navbar from './Navbar/Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <SortingVisualizer />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}